services:
    database:
        build:
            context: ./database
        container_name: course_recommender_database
        expose:
            - "${DB_PORT}"
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - TZ='UTC+5'
            - PGTZ='UTC+5'
        volumes:
            - CRD:/var/lib/postgresql/data
            - ../database/entrypoint:/docker-entrypoint-initdb.d:ro
        networks:
            - course-recommender-network
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 5s
            timeout: 5s
            retries: 5

    backend:
        build:
            context: ./backend
        container_name: course_recommender_backend
        expose:
            - "${BACKEND_PORT}"
        depends_on:
            database:
                condition: service_healthy
        environment:
            - user=${POSTGRES_USER}
            - password=${POSTGRES_PASSWORD}
            - host=${DB_HOST}
            - dbport=${DB_PORT}
            - dbname=${POSTGRES_DB}
            - sslmode=disable
            - BACKEND_PORT=${BACKEND_PORT}
        networks:
            - course-recommender-network
        restart: unless-stopped

    envoy:
        build:
            context: ./envoy
        container_name: course_recommender_envoy
        depends_on:
            - backend
        expose:
            - "${ENVOY_PORT}"
            - "${ENVOY_ADMIN_PORT}"
        ports:
            - "${ENVOY_PORT}:${ENVOY_PORT}"
        environment:
            - BACKEND_PORT=${BACKEND_PORT}
            - ENVOY_PORT=${ENVOY_PORT}
            - ENVOY_ADMIN_PORT=${ENVOY_ADMIN_PORT}
        volumes:
            - ../envoy/log:/tmp:rw
        networks:
            - course-recommender-network
        restart: unless-stopped

    frontend:
        build:
            context: ./frontend
        container_name: course_recommender_frontend
        volumes:
            - ../frontend/build/web:/app/build/web:rw

    nginx:
        build:
            context: ./nginx
        container_name: course_recommender_nginx
        depends_on:
            - envoy
            - backend
            - frontend
        expose:
            - "${NGINX_HTTP_PORT}"
            - "${NGINX_HTTPS_PORT}"
        environment:
            - BACKEND_PORT=${BACKEND_PORT}
            - ENVOY_PORT=${ENVOY_PORT}
            - NGINX_HTTP_PORT=${NGINX_HTTP_PORT}
            - NGINX_HTTPS_PORT=${NGINX_HTTPS_PORT}
        volumes:
            - ../frontend/build/web:/usr/share/nginx/html:ro
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/myapp.conf.template:/etc/nginx/templates/myapp.conf.template:ro
            - ./nginx/ssl:/etc/ssl:ro
            - ../nginx/log:/var/log/nginx:rw
        networks:
            - course-recommender-network
        restart: unless-stopped

    cloudflared:
        image: cloudflare/cloudflared:latest
        depends_on:
            - nginx
        command: tunnel --no-autoupdate --origin-ca-pool /etc/ssl/cert.pem --protocol http2 run
        environment:
            - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
        volumes:
            - ./nginx/ssl:/etc/ssl:ro
        networks:
            - course-recommender-network
        restart: unless-stopped

volumes:
    CRD:

networks:
    course-recommender-network:
        driver: bridge
