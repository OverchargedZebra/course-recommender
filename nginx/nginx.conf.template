# Define the backend service.
upstream grpc_backend {
    # This will be replaced by the value of the PORT environment variable.
    server backend:$BACKEND_PORT;
}

upstream grpc_web_backend {
    server envoy:$ENVOY_PORT;
}

map $content_type $grpc_destination {
    default grpc://grpc_backend;
    "application/grpc-web" http://grpc_web_backend;
}

# insecure port that would change
server {
    listen $NGINX_HTTP_PORT default_server;
    listen [::]:$NGINX_HTTP_PORT default_server;
    server_name $NGINX_SERVER_NAME;

    location / {
        return 301 https://$host$request_uri;
    }
}

# settings for tls enabled server
server {
    listen $NGINX_HTTPS_PORT ssl default_server;
    listen [::]:$NGINX_HTTPS_PORT ssl default_server;

    http2 on;
    proxy_http_version 1.1;

    ssl_certificate /etc/ssl/cert.pem;
    ssl_certificate_key /etc/ssl/privkey.pem;

    server_name $NGINX_SERVER_NAME;
    client_max_body_size 64M;

    # Location for serving the Flutter web application.
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    location /course_recommender {
        # This will handle OPTIONS pre-flight requests from browsers for gRPC-Web.
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,x-grpc-web';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Add CORS headers for the actual gRPC-Web requests.
        add_header 'Access-Control-Allow-Origin' '*' always;
        # Use the variable set by the map to route traffic correctly.
        grpc_pass $grpc_destination;
    }

}