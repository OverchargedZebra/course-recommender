// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudent = `-- name: CreateStudent :one
INSERT INTO student(student_email, student_password)
VALUES ($1, $2)
RETURNING id, student_email, student_password
`

type CreateStudentParams struct {
	StudentEmail    string `json:"student_email"`
	StudentPassword string `json:"student_password"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent, arg.StudentEmail, arg.StudentPassword)
	var i Student
	err := row.Scan(&i.ID, &i.StudentEmail, &i.StudentPassword)
	return i, err
}

const deleteStudent = `-- name: DeleteStudent :one
DELETE FROM student
WHERE id = $1
RETURNING TRUE
`

func (q *Queries) DeleteStudent(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteStudent, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getStudent = `-- name: GetStudent :one
SELECT id, student_email, student_password
FROM student
WHERE id = $1
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRow(ctx, getStudent, id)
	var i Student
	err := row.Scan(&i.ID, &i.StudentEmail, &i.StudentPassword)
	return i, err
}

const getStudentByEmail = `-- name: GetStudentByEmail :one
SELECT id, student_email, student_password
FROM student
WHERE student_email = $1
`

func (q *Queries) GetStudentByEmail(ctx context.Context, studentEmail string) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentByEmail, studentEmail)
	var i Student
	err := row.Scan(&i.ID, &i.StudentEmail, &i.StudentPassword)
	return i, err
}

const listStudents = `-- name: ListStudents :many
SELECT id, student_email, student_password
FROM student
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.StudentEmail, &i.StudentPassword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :one
UPDATE student
SET student_email = COALESCE($2, student_email),
    student_password = COALESCE($3, student_password)
WHERE id = $1
RETURNING id, student_email, student_password
`

type UpdateStudentParams struct {
	ID              int64       `json:"id"`
	StudentEmail    pgtype.Text `json:"student_email"`
	StudentPassword pgtype.Text `json:"student_password"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, updateStudent, arg.ID, arg.StudentEmail, arg.StudentPassword)
	var i Student
	err := row.Scan(&i.ID, &i.StudentEmail, &i.StudentPassword)
	return i, err
}
