// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: degree_type.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDegreeType = `-- name: CreateDegreeType :one
INSERT INTO degree_type (degree_name)
VALUES ($1)
RETURNING id, degree_name, search_vector
`

func (q *Queries) CreateDegreeType(ctx context.Context, degreeName pgtype.Text) (DegreeType, error) {
	row := q.db.QueryRow(ctx, createDegreeType, degreeName)
	var i DegreeType
	err := row.Scan(&i.ID, &i.DegreeName, &i.SearchVector)
	return i, err
}

const deleteDegreeType = `-- name: DeleteDegreeType :one
Delete FROM degree_type
WHERE id = $1
RETURNING TRUE
`

func (q *Queries) DeleteDegreeType(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteDegreeType, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getDegreeType = `-- name: GetDegreeType :one
SELECT id, degree_name, search_vector
FROM degree_type
WHERE id = $1
`

func (q *Queries) GetDegreeType(ctx context.Context, id int64) (DegreeType, error) {
	row := q.db.QueryRow(ctx, getDegreeType, id)
	var i DegreeType
	err := row.Scan(&i.ID, &i.DegreeName, &i.SearchVector)
	return i, err
}

const getDegreeTypeByName = `-- name: GetDegreeTypeByName :many
SELECT degree_type.id, degree_type.degree_name, degree_type.search_vector,
    ts_rank(search_vector, query) AS match_ranking
FROM degree_type,
    websearch_to_tsquery(COALESCE($1::TEXT, '')) AS query
WHERE search_vector @@ query
ORDER BY match_ranking DESC
`

type GetDegreeTypeByNameRow struct {
	DegreeType   DegreeType `json:"degree_type"`
	MatchRanking float32    `json:"match_ranking"`
}

func (q *Queries) GetDegreeTypeByName(ctx context.Context, degreeName pgtype.Text) ([]GetDegreeTypeByNameRow, error) {
	rows, err := q.db.Query(ctx, getDegreeTypeByName, degreeName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDegreeTypeByNameRow
	for rows.Next() {
		var i GetDegreeTypeByNameRow
		if err := rows.Scan(
			&i.DegreeType.ID,
			&i.DegreeType.DegreeName,
			&i.DegreeType.SearchVector,
			&i.MatchRanking,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDegreeTypes = `-- name: ListDegreeTypes :many
SELECT id, degree_name, search_vector
FROM degree_type
`

func (q *Queries) ListDegreeTypes(ctx context.Context) ([]DegreeType, error) {
	rows, err := q.db.Query(ctx, listDegreeTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DegreeType
	for rows.Next() {
		var i DegreeType
		if err := rows.Scan(&i.ID, &i.DegreeName, &i.SearchVector); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDegreeType = `-- name: UpdateDegreeType :one
UPDATE degree_type
SET degree_name = COALESCE($2, degree_name)
WHERE id = $1
RETURNING id, degree_name, search_vector
`

type UpdateDegreeTypeParams struct {
	ID         int64       `json:"id"`
	DegreeName pgtype.Text `json:"degree_name"`
}

func (q *Queries) UpdateDegreeType(ctx context.Context, arg UpdateDegreeTypeParams) (DegreeType, error) {
	row := q.db.QueryRow(ctx, updateDegreeType, arg.ID, arg.DegreeName)
	var i DegreeType
	err := row.Scan(&i.ID, &i.DegreeName, &i.SearchVector)
	return i, err
}
