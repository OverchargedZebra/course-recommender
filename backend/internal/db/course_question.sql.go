// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_question.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourseQuestion = `-- name: CreateCourseQuestion :one
INSERT INTO course_question (
        course_id,
        question,
        question_option_a,
        question_option_b,
        question_option_c,
        question_option_d,
        correct_option
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, course_id, question, question_option_a, question_option_b, question_option_c, question_option_d, correct_option
`

type CreateCourseQuestionParams struct {
	CourseID        int64       `json:"course_id"`
	Question        pgtype.Text `json:"question"`
	QuestionOptionA pgtype.Text `json:"question_option_a"`
	QuestionOptionB pgtype.Text `json:"question_option_b"`
	QuestionOptionC pgtype.Text `json:"question_option_c"`
	QuestionOptionD pgtype.Text `json:"question_option_d"`
	CorrectOption   pgtype.Int2 `json:"correct_option"`
}

func (q *Queries) CreateCourseQuestion(ctx context.Context, arg CreateCourseQuestionParams) (CourseQuestion, error) {
	row := q.db.QueryRow(ctx, createCourseQuestion,
		arg.CourseID,
		arg.Question,
		arg.QuestionOptionA,
		arg.QuestionOptionB,
		arg.QuestionOptionC,
		arg.QuestionOptionD,
		arg.CorrectOption,
	)
	var i CourseQuestion
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Question,
		&i.QuestionOptionA,
		&i.QuestionOptionB,
		&i.QuestionOptionC,
		&i.QuestionOptionD,
		&i.CorrectOption,
	)
	return i, err
}

const deleteCourseQuestion = `-- name: DeleteCourseQuestion :one
DELETE FROM course_question
WHERE id = $1
RETURNING TRUE
`

func (q *Queries) DeleteCourseQuestion(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteCourseQuestion, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getCourseQuestion = `-- name: GetCourseQuestion :one
SELECT id, course_id, question, question_option_a, question_option_b, question_option_c, question_option_d, correct_option
FROM course_question
WHERE id = $1
`

func (q *Queries) GetCourseQuestion(ctx context.Context, id int64) (CourseQuestion, error) {
	row := q.db.QueryRow(ctx, getCourseQuestion, id)
	var i CourseQuestion
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Question,
		&i.QuestionOptionA,
		&i.QuestionOptionB,
		&i.QuestionOptionC,
		&i.QuestionOptionD,
		&i.CorrectOption,
	)
	return i, err
}

const getCourseQuestionsByCourseId = `-- name: GetCourseQuestionsByCourseId :many
SELECT id, course_id, question, question_option_a, question_option_b, question_option_c, question_option_d, correct_option
FROM course_question
WHERE course_id = $1
`

func (q *Queries) GetCourseQuestionsByCourseId(ctx context.Context, courseID int64) ([]CourseQuestion, error) {
	rows, err := q.db.Query(ctx, getCourseQuestionsByCourseId, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseQuestion
	for rows.Next() {
		var i CourseQuestion
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Question,
			&i.QuestionOptionA,
			&i.QuestionOptionB,
			&i.QuestionOptionC,
			&i.QuestionOptionD,
			&i.CorrectOption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCourseQuestions = `-- name: ListCourseQuestions :many
Select id, course_id, question, question_option_a, question_option_b, question_option_c, question_option_d, correct_option
FROM course_question
ORDER BY course_id ASC
`

func (q *Queries) ListCourseQuestions(ctx context.Context) ([]CourseQuestion, error) {
	rows, err := q.db.Query(ctx, listCourseQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CourseQuestion
	for rows.Next() {
		var i CourseQuestion
		if err := rows.Scan(
			&i.ID,
			&i.CourseID,
			&i.Question,
			&i.QuestionOptionA,
			&i.QuestionOptionB,
			&i.QuestionOptionC,
			&i.QuestionOptionD,
			&i.CorrectOption,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseQuestion = `-- name: UpdateCourseQuestion :one
UPDATE course_question
SET question = COALESCE($2, question),
    question_option_a = COALESCE(
        $3,
        question_option_a
    ),
    question_option_b = COALESCE(
        $4,
        question_option_b
    ),
    question_option_c = COALESCE(
        $5,
        question_option_c
    ),
    question_option_d = COALESCE(
        $6,
        question_option_d
    ),
    correct_option = COALESCE($7, correct_option)
WHERE id = $1
RETURNING id, course_id, question, question_option_a, question_option_b, question_option_c, question_option_d, correct_option
`

type UpdateCourseQuestionParams struct {
	ID              int64       `json:"id"`
	Question        pgtype.Text `json:"question"`
	QuestionOptionA pgtype.Text `json:"question_option_a"`
	QuestionOptionB pgtype.Text `json:"question_option_b"`
	QuestionOptionC pgtype.Text `json:"question_option_c"`
	QuestionOptionD pgtype.Text `json:"question_option_d"`
	CorrectOption   pgtype.Int2 `json:"correct_option"`
}

func (q *Queries) UpdateCourseQuestion(ctx context.Context, arg UpdateCourseQuestionParams) (CourseQuestion, error) {
	row := q.db.QueryRow(ctx, updateCourseQuestion,
		arg.ID,
		arg.Question,
		arg.QuestionOptionA,
		arg.QuestionOptionB,
		arg.QuestionOptionC,
		arg.QuestionOptionD,
		arg.CorrectOption,
	)
	var i CourseQuestion
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Question,
		&i.QuestionOptionA,
		&i.QuestionOptionB,
		&i.QuestionOptionC,
		&i.QuestionOptionD,
		&i.CorrectOption,
	)
	return i, err
}
