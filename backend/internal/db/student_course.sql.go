// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: student_course.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStudentCourse = `-- name: CreateStudentCourse :one
INSERT INTO
    student_course (student_id, course_id)
VALUES
    ($1, $2)
RETURNING
    student_id, course_id, marks, feedback
`

type CreateStudentCourseParams struct {
	StudentID int64 `json:"student_id"`
	CourseID  int64 `json:"course_id"`
}

func (q *Queries) CreateStudentCourse(ctx context.Context, arg CreateStudentCourseParams) (StudentCourse, error) {
	row := q.db.QueryRow(ctx, createStudentCourse, arg.StudentID, arg.CourseID)
	var i StudentCourse
	err := row.Scan(
		&i.StudentID,
		&i.CourseID,
		&i.Marks,
		&i.Feedback,
	)
	return i, err
}

const deleteStudentCourse = `-- name: DeleteStudentCourse :one
DELETE FROM student_course
WHERE
    course_id = $1
    AND student_id = $2
RETURNING
    TRUE
`

type DeleteStudentCourseParams struct {
	CourseID  int64 `json:"course_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) DeleteStudentCourse(ctx context.Context, arg DeleteStudentCourseParams) (bool, error) {
	row := q.db.QueryRow(ctx, deleteStudentCourse, arg.CourseID, arg.StudentID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getCoursesByStudentId = `-- name: GetCoursesByStudentId :many
SELECT
    course.id, course.course_name, course.difficulty
FROM
    student_course
    LEFT JOIN course ON course.id = student_course.course_id
    LEFT JOIN student ON student.id = student_course.student_id
WHERE
    student.id = $1
`

type GetCoursesByStudentIdRow struct {
	Course Course `json:"course"`
}

func (q *Queries) GetCoursesByStudentId(ctx context.Context, id int64) ([]GetCoursesByStudentIdRow, error) {
	rows, err := q.db.Query(ctx, getCoursesByStudentId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesByStudentIdRow
	for rows.Next() {
		var i GetCoursesByStudentIdRow
		if err := rows.Scan(&i.Course.ID, &i.Course.CourseName, &i.Course.Difficulty); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPercentageStudentCourse = `-- name: GetPercentageStudentCourse :one
SELECT
    (COALESCE(sc.marks, 0) * 100) / NULLIF(cq.total_question, 0) AS percentage
FROM
    student_course AS sc
    CROSS JOIN (
        SELECT
            COUNT(*) AS total_question
        FROM
            course_question
        WHERE
            course_question.course_id = $1
    ) AS cq
WHERE
    sc.course_id = $1
    AND sc.student_id = $2
`

type GetPercentageStudentCourseParams struct {
	CourseID  int64 `json:"course_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) GetPercentageStudentCourse(ctx context.Context, arg GetPercentageStudentCourseParams) (int32, error) {
	row := q.db.QueryRow(ctx, getPercentageStudentCourse, arg.CourseID, arg.StudentID)
	var percentage int32
	err := row.Scan(&percentage)
	return percentage, err
}

const getStudentsByCourseId = `-- name: GetStudentsByCourseId :many
SELECT
    student.id,
    student.student_username
FROM
    student_course
    LEFT JOIN course ON course.id = student_course.course_id
    LEFT JOIN student ON student.id = student_course.student_id
WHERE
    course.id = $1
`

type GetStudentsByCourseIdRow struct {
	ID              pgtype.Int8 `json:"id"`
	StudentUsername pgtype.Text `json:"student_username"`
}

func (q *Queries) GetStudentsByCourseId(ctx context.Context, id int64) ([]GetStudentsByCourseIdRow, error) {
	rows, err := q.db.Query(ctx, getStudentsByCourseId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentsByCourseIdRow
	for rows.Next() {
		var i GetStudentsByCourseIdRow
		if err := rows.Scan(&i.ID, &i.StudentUsername); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentCourses = `-- name: ListStudentCourses :many
SELECT
    student_id, course_id, marks, feedback
FROM
    student_course
`

func (q *Queries) ListStudentCourses(ctx context.Context) ([]StudentCourse, error) {
	rows, err := q.db.Query(ctx, listStudentCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StudentCourse
	for rows.Next() {
		var i StudentCourse
		if err := rows.Scan(
			&i.StudentID,
			&i.CourseID,
			&i.Marks,
			&i.Feedback,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudentCourse = `-- name: UpdateStudentCourse :one
UPDATE student_course
SET
    marks = $3,
    feedback = $4
WHERE
    student_id = $1
    AND course_id = $2
RETURNING
    student_id, course_id, marks, feedback
`

type UpdateStudentCourseParams struct {
	StudentID int64       `json:"student_id"`
	CourseID  int64       `json:"course_id"`
	Marks     pgtype.Int2 `json:"marks"`
	Feedback  pgtype.Bool `json:"feedback"`
}

func (q *Queries) UpdateStudentCourse(ctx context.Context, arg UpdateStudentCourseParams) (StudentCourse, error) {
	row := q.db.QueryRow(ctx, updateStudentCourse,
		arg.StudentID,
		arg.CourseID,
		arg.Marks,
		arg.Feedback,
	)
	var i StudentCourse
	err := row.Scan(
		&i.StudentID,
		&i.CourseID,
		&i.Marks,
		&i.Feedback,
	)
	return i, err
}
