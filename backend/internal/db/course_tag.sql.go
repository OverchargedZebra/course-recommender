// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course_tag.sql

package db

import (
	"context"
)

const createCourseTag = `-- name: CreateCourseTag :one
INSERT INTO course_tag(course_id, tag_id)
VALUES ($1, $2)
RETURNING course_id, tag_id
`

type CreateCourseTagParams struct {
	CourseID int64 `json:"course_id"`
	TagID    int64 `json:"tag_id"`
}

func (q *Queries) CreateCourseTag(ctx context.Context, arg CreateCourseTagParams) (CourseTag, error) {
	row := q.db.QueryRow(ctx, createCourseTag, arg.CourseID, arg.TagID)
	var i CourseTag
	err := row.Scan(&i.CourseID, &i.TagID)
	return i, err
}

const deleteCourseTag = `-- name: DeleteCourseTag :one
DELETE FROM course_tag
WHERE course_id = $1
    AND tag_id = $2
RETURNING TRUE
`

type DeleteCourseTagParams struct {
	CourseID int64 `json:"course_id"`
	TagID    int64 `json:"tag_id"`
}

func (q *Queries) DeleteCourseTag(ctx context.Context, arg DeleteCourseTagParams) (bool, error) {
	row := q.db.QueryRow(ctx, deleteCourseTag, arg.CourseID, arg.TagID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getCoursesByTag = `-- name: GetCoursesByTag :many
SELECT course.id, course.difficulty, course.course_name, course.course_name_tsv,
    tag.id, tag.tag_name, tag.tag_name_tsv
FROM course_tag
    LEFT JOIN course ON course.id = course_tag.course_id
    LEFT JOIN tag on tag.id = course_tag.tag_id
WHERE tag.id = $1
`

type GetCoursesByTagRow struct {
	Course Course `json:"course"`
	Tag    Tag    `json:"tag"`
}

func (q *Queries) GetCoursesByTag(ctx context.Context, id int64) ([]GetCoursesByTagRow, error) {
	rows, err := q.db.Query(ctx, getCoursesByTag, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesByTagRow
	for rows.Next() {
		var i GetCoursesByTagRow
		if err := rows.Scan(
			&i.Course.ID,
			&i.Course.Difficulty,
			&i.Course.CourseName,
			&i.Course.CourseNameTsv,
			&i.Tag.ID,
			&i.Tag.TagName,
			&i.Tag.TagNameTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByCourseId = `-- name: GetTagsByCourseId :many
SELECT course.id, course.difficulty, course.course_name, course.course_name_tsv,
    tag.id, tag.tag_name, tag.tag_name_tsv
FROM course_tag
    LEFT JOIN course ON course.id = course_tag.course_id
    LEFT JOIN tag on tag.id = course_tag.tag_id
WHERE course.id = $1
`

type GetTagsByCourseIdRow struct {
	Course Course `json:"course"`
	Tag    Tag    `json:"tag"`
}

func (q *Queries) GetTagsByCourseId(ctx context.Context, id int64) ([]GetTagsByCourseIdRow, error) {
	rows, err := q.db.Query(ctx, getTagsByCourseId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsByCourseIdRow
	for rows.Next() {
		var i GetTagsByCourseIdRow
		if err := rows.Scan(
			&i.Course.ID,
			&i.Course.Difficulty,
			&i.Course.CourseName,
			&i.Course.CourseNameTsv,
			&i.Tag.ID,
			&i.Tag.TagName,
			&i.Tag.TagNameTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
