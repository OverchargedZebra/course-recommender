// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: course.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (course_name, difficulty)
VALUES ($1, $2)
RETURNING id, difficulty, course_name, course_name_tsv
`

type CreateCourseParams struct {
	CourseName pgtype.Text `json:"course_name"`
	Difficulty pgtype.Int2 `json:"difficulty"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse, arg.CourseName, arg.Difficulty)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Difficulty,
		&i.CourseName,
		&i.CourseNameTsv,
	)
	return i, err
}

const deleteCourse = `-- name: DeleteCourse :one
DELETE FROM course
WHERE id = $1
RETURNING TRUE
`

func (q *Queries) DeleteCourse(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteCourse, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getCourse = `-- name: GetCourse :one
SELECT id, difficulty, course_name, course_name_tsv
FROM course
WHERE id = $1
`

func (q *Queries) GetCourse(ctx context.Context, id int64) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Difficulty,
		&i.CourseName,
		&i.CourseNameTsv,
	)
	return i, err
}

const getCourseByName = `-- name: GetCourseByName :many
SELECT course.id, course.difficulty, course.course_name, course.course_name_tsv,
    ts_rank(course_name_tsv, query) AS match_ranking
FROM course,
    to_tsquery(COALESCE($1::TEXT, '')) AS query
WHERE course_name_tsv @@ query
ORDER BY match_ranking DESC
`

type GetCourseByNameRow struct {
	ID            int64       `json:"id"`
	Difficulty    pgtype.Int2 `json:"difficulty"`
	CourseName    pgtype.Text `json:"course_name"`
	CourseNameTsv string      `json:"course_name_tsv"`
	MatchRanking  float32     `json:"match_ranking"`
}

func (q *Queries) GetCourseByName(ctx context.Context, courseName pgtype.Text) ([]GetCourseByNameRow, error) {
	rows, err := q.db.Query(ctx, getCourseByName, courseName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCourseByNameRow
	for rows.Next() {
		var i GetCourseByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Difficulty,
			&i.CourseName,
			&i.CourseNameTsv,
			&i.MatchRanking,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCourses = `-- name: ListCourses :many
SELECT id, difficulty, course_name, course_name_tsv
FROM course
ORDER BY difficulty ASC
`

func (q *Queries) ListCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, listCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Course
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Difficulty,
			&i.CourseName,
			&i.CourseNameTsv,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourse = `-- name: UpdateCourse :one
UPDATE course
SET course_name = COALESCE($2, course_name),
    difficulty = COALESCE($3, difficulty)
WHERE id = $1
RETURNING id, difficulty, course_name, course_name_tsv
`

type UpdateCourseParams struct {
	ID         int64       `json:"id"`
	CourseName pgtype.Text `json:"course_name"`
	Difficulty pgtype.Int2 `json:"difficulty"`
}

func (q *Queries) UpdateCourse(ctx context.Context, arg UpdateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, updateCourse, arg.ID, arg.CourseName, arg.Difficulty)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Difficulty,
		&i.CourseName,
		&i.CourseNameTsv,
	)
	return i, err
}
