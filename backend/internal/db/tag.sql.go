// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tag (tag_name)
VALUES ($1)
RETURNING id, tag_name, search_vector
`

func (q *Queries) CreateTag(ctx context.Context, tagName pgtype.Text) (Tag, error) {
	row := q.db.QueryRow(ctx, createTag, tagName)
	var i Tag
	err := row.Scan(&i.ID, &i.TagName, &i.SearchVector)
	return i, err
}

const deleteTag = `-- name: DeleteTag :one
DELETE FROM tag
WHERE id = $1
RETURNING true
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteTag, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getTag = `-- name: GetTag :one
SELECT id, tag_name, search_vector
FROM tag
WHERE id = $1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRow(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.TagName, &i.SearchVector)
	return i, err
}

const getTagByName = `-- name: GetTagByName :many
SELECT tag.id, tag.tag_name, tag.search_vector,
    ts_rank(search_vector, query) AS match_ranking
FROM tag,
    websearch_to_tsquery(COALESCE($1::TEXT, '')) AS query
WHERE search_vector @@ query
ORDER BY match_ranking DESC
`

type GetTagByNameRow struct {
	Tag          Tag     `json:"tag"`
	MatchRanking float32 `json:"match_ranking"`
}

func (q *Queries) GetTagByName(ctx context.Context, tagName pgtype.Text) ([]GetTagByNameRow, error) {
	rows, err := q.db.Query(ctx, getTagByName, tagName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagByNameRow
	for rows.Next() {
		var i GetTagByNameRow
		if err := rows.Scan(
			&i.Tag.ID,
			&i.Tag.TagName,
			&i.Tag.SearchVector,
			&i.MatchRanking,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT id, tag_name, search_vector
FROM tag
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.TagName, &i.SearchVector); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tag
SET tag_name = COALESCE($2, tag_name)
WHERE id = $1
RETURNING id, tag_name, search_vector
`

type UpdateTagParams struct {
	ID      int64       `json:"id"`
	TagName pgtype.Text `json:"tag_name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTag, arg.ID, arg.TagName)
	var i Tag
	err := row.Scan(&i.ID, &i.TagName, &i.SearchVector)
	return i, err
}
