// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: degree_course.sql

package db

import (
	"context"
)

const createDegreeCourse = `-- name: CreateDegreeCourse :one
INSERT INTO degree_course(degree_type_id, course_id)
VALUES ($1, $2)
RETURNING degree_type_id, course_id
`

type CreateDegreeCourseParams struct {
	DegreeTypeID int64 `json:"degree_type_id"`
	CourseID     int64 `json:"course_id"`
}

func (q *Queries) CreateDegreeCourse(ctx context.Context, arg CreateDegreeCourseParams) (DegreeCourse, error) {
	row := q.db.QueryRow(ctx, createDegreeCourse, arg.DegreeTypeID, arg.CourseID)
	var i DegreeCourse
	err := row.Scan(&i.DegreeTypeID, &i.CourseID)
	return i, err
}

const deleteDegreeCourse = `-- name: DeleteDegreeCourse :one
DELETE FROM degree_course
WHERE degree_type_id = $1
    AND course_id = $2
RETURNING TRUE
`

type DeleteDegreeCourseParams struct {
	DegreeTypeID int64 `json:"degree_type_id"`
	CourseID     int64 `json:"course_id"`
}

func (q *Queries) DeleteDegreeCourse(ctx context.Context, arg DeleteDegreeCourseParams) (bool, error) {
	row := q.db.QueryRow(ctx, deleteDegreeCourse, arg.DegreeTypeID, arg.CourseID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getCoursesByDegreeId = `-- name: GetCoursesByDegreeId :many
SELECT course.id, course.difficulty, course.course_name
FROM degree_course
    LEFT JOIN degree_type ON degree_type.id = degree_course.degree_type_id
    LEFT JOIN course ON course.id = degree_course.course_id
WHERE degree_type.id = $1
`

type GetCoursesByDegreeIdRow struct {
	Course Course `json:"course"`
}

func (q *Queries) GetCoursesByDegreeId(ctx context.Context, id int64) ([]GetCoursesByDegreeIdRow, error) {
	rows, err := q.db.Query(ctx, getCoursesByDegreeId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCoursesByDegreeIdRow
	for rows.Next() {
		var i GetCoursesByDegreeIdRow
		if err := rows.Scan(&i.Course.ID, &i.Course.Difficulty, &i.Course.CourseName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDegreesByCourseId = `-- name: GetDegreesByCourseId :many
SELECT degree_type.id, degree_type.degree_name
FROM degree_course
    LEFT JOIN degree_type ON degree_type.id = degree_course.degree_type_id
    LEFT JOIN course ON course.id = degree_course.course_id
WHERE course.id = $1
`

type GetDegreesByCourseIdRow struct {
	DegreeType DegreeType `json:"degree_type"`
}

func (q *Queries) GetDegreesByCourseId(ctx context.Context, id int64) ([]GetDegreesByCourseIdRow, error) {
	rows, err := q.db.Query(ctx, getDegreesByCourseId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDegreesByCourseIdRow
	for rows.Next() {
		var i GetDegreesByCourseIdRow
		if err := rows.Scan(&i.DegreeType.ID, &i.DegreeType.DegreeName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
