// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: recommender_utilities.sql

package db

import (
	"context"
)

const loadRecommenderData = `-- name: LoadRecommenderData :many
SELECT
    course.id, course.course_name, course.difficulty,
    tag.id, tag.tag_name,
    course_tag.course_id, course_tag.tag_id,
    degree_type.id, degree_type.degree_name,
    degree_course.degree_type_id, degree_course.course_id
FROM
    course
    LEFT JOIN course_tag ON course_tag.course_id = course.id
    LEFT JOIN tag ON course_tag.tag_id = tag.id
    LEFT JOIN degree_course ON degree_course.course_id = course.id
    LEFT JOIN degree_type ON degree_course.degree_type_id = degree_type.id
`

type LoadRecommenderDataRow struct {
	Course       Course       `json:"course"`
	Tag          Tag          `json:"tag"`
	CourseTag    CourseTag    `json:"course_tag"`
	DegreeType   DegreeType   `json:"degree_type"`
	DegreeCourse DegreeCourse `json:"degree_course"`
}

func (q *Queries) LoadRecommenderData(ctx context.Context) ([]LoadRecommenderDataRow, error) {
	rows, err := q.db.Query(ctx, loadRecommenderData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoadRecommenderDataRow
	for rows.Next() {
		var i LoadRecommenderDataRow
		if err := rows.Scan(
			&i.Course.ID,
			&i.Course.CourseName,
			&i.Course.Difficulty,
			&i.Tag.ID,
			&i.Tag.TagName,
			&i.CourseTag.CourseID,
			&i.CourseTag.TagID,
			&i.DegreeType.ID,
			&i.DegreeType.DegreeName,
			&i.DegreeCourse.DegreeTypeID,
			&i.DegreeCourse.CourseID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
