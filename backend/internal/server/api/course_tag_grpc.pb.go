// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: course_tag.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourseTagService_CreateCourseTag_FullMethodName   = "/course_recommender.CourseTagService/CreateCourseTag"
	CourseTagService_GetTagsByCourseId_FullMethodName = "/course_recommender.CourseTagService/GetTagsByCourseId"
	CourseTagService_GetCoursesByTagId_FullMethodName = "/course_recommender.CourseTagService/GetCoursesByTagId"
	CourseTagService_DeleteCourseTag_FullMethodName   = "/course_recommender.CourseTagService/DeleteCourseTag"
)

// CourseTagServiceClient is the client API for CourseTagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The gRPC service definition for course tags.
type CourseTagServiceClient interface {
	// Creates a new course-tag association.
	CreateCourseTag(ctx context.Context, in *CreateCourseTagRequest, opts ...grpc.CallOption) (*CreateCourseTagResponse, error)
	// Retrieves all tags for a specific course.
	GetTagsByCourseId(ctx context.Context, in *GetTagsByCourseIdRequest, opts ...grpc.CallOption) (*GetTagsByCourseIdResponse, error)
	// Retrieves all courses for a specific tag.
	GetCoursesByTagId(ctx context.Context, in *GetCoursesByTagIdRequest, opts ...grpc.CallOption) (*GetCoursesByTagIdResponse, error)
	// Deletes a course-tag association.
	DeleteCourseTag(ctx context.Context, in *DeleteCourseTagRequest, opts ...grpc.CallOption) (*DeleteCourseTagResponse, error)
}

type courseTagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseTagServiceClient(cc grpc.ClientConnInterface) CourseTagServiceClient {
	return &courseTagServiceClient{cc}
}

func (c *courseTagServiceClient) CreateCourseTag(ctx context.Context, in *CreateCourseTagRequest, opts ...grpc.CallOption) (*CreateCourseTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseTagResponse)
	err := c.cc.Invoke(ctx, CourseTagService_CreateCourseTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseTagServiceClient) GetTagsByCourseId(ctx context.Context, in *GetTagsByCourseIdRequest, opts ...grpc.CallOption) (*GetTagsByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsByCourseIdResponse)
	err := c.cc.Invoke(ctx, CourseTagService_GetTagsByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseTagServiceClient) GetCoursesByTagId(ctx context.Context, in *GetCoursesByTagIdRequest, opts ...grpc.CallOption) (*GetCoursesByTagIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesByTagIdResponse)
	err := c.cc.Invoke(ctx, CourseTagService_GetCoursesByTagId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseTagServiceClient) DeleteCourseTag(ctx context.Context, in *DeleteCourseTagRequest, opts ...grpc.CallOption) (*DeleteCourseTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseTagResponse)
	err := c.cc.Invoke(ctx, CourseTagService_DeleteCourseTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseTagServiceServer is the server API for CourseTagService service.
// All implementations must embed UnimplementedCourseTagServiceServer
// for forward compatibility.
//
// The gRPC service definition for course tags.
type CourseTagServiceServer interface {
	// Creates a new course-tag association.
	CreateCourseTag(context.Context, *CreateCourseTagRequest) (*CreateCourseTagResponse, error)
	// Retrieves all tags for a specific course.
	GetTagsByCourseId(context.Context, *GetTagsByCourseIdRequest) (*GetTagsByCourseIdResponse, error)
	// Retrieves all courses for a specific tag.
	GetCoursesByTagId(context.Context, *GetCoursesByTagIdRequest) (*GetCoursesByTagIdResponse, error)
	// Deletes a course-tag association.
	DeleteCourseTag(context.Context, *DeleteCourseTagRequest) (*DeleteCourseTagResponse, error)
	mustEmbedUnimplementedCourseTagServiceServer()
}

// UnimplementedCourseTagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourseTagServiceServer struct{}

func (UnimplementedCourseTagServiceServer) CreateCourseTag(context.Context, *CreateCourseTagRequest) (*CreateCourseTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseTag not implemented")
}
func (UnimplementedCourseTagServiceServer) GetTagsByCourseId(context.Context, *GetTagsByCourseIdRequest) (*GetTagsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsByCourseId not implemented")
}
func (UnimplementedCourseTagServiceServer) GetCoursesByTagId(context.Context, *GetCoursesByTagIdRequest) (*GetCoursesByTagIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByTagId not implemented")
}
func (UnimplementedCourseTagServiceServer) DeleteCourseTag(context.Context, *DeleteCourseTagRequest) (*DeleteCourseTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseTag not implemented")
}
func (UnimplementedCourseTagServiceServer) mustEmbedUnimplementedCourseTagServiceServer() {}
func (UnimplementedCourseTagServiceServer) testEmbeddedByValue()                          {}

// UnsafeCourseTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseTagServiceServer will
// result in compilation errors.
type UnsafeCourseTagServiceServer interface {
	mustEmbedUnimplementedCourseTagServiceServer()
}

func RegisterCourseTagServiceServer(s grpc.ServiceRegistrar, srv CourseTagServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourseTagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourseTagService_ServiceDesc, srv)
}

func _CourseTagService_CreateCourseTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseTagServiceServer).CreateCourseTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseTagService_CreateCourseTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseTagServiceServer).CreateCourseTag(ctx, req.(*CreateCourseTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseTagService_GetTagsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseTagServiceServer).GetTagsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseTagService_GetTagsByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseTagServiceServer).GetTagsByCourseId(ctx, req.(*GetTagsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseTagService_GetCoursesByTagId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByTagIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseTagServiceServer).GetCoursesByTagId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseTagService_GetCoursesByTagId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseTagServiceServer).GetCoursesByTagId(ctx, req.(*GetCoursesByTagIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseTagService_DeleteCourseTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseTagServiceServer).DeleteCourseTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseTagService_DeleteCourseTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseTagServiceServer).DeleteCourseTag(ctx, req.(*DeleteCourseTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseTagService_ServiceDesc is the grpc.ServiceDesc for CourseTagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseTagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_recommender.CourseTagService",
	HandlerType: (*CourseTagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourseTag",
			Handler:    _CourseTagService_CreateCourseTag_Handler,
		},
		{
			MethodName: "GetTagsByCourseId",
			Handler:    _CourseTagService_GetTagsByCourseId_Handler,
		},
		{
			MethodName: "GetCoursesByTagId",
			Handler:    _CourseTagService_GetCoursesByTagId_Handler,
		},
		{
			MethodName: "DeleteCourseTag",
			Handler:    _CourseTagService_DeleteCourseTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course_tag.proto",
}
