// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: root.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourseRecommenderService_CreateCourse_FullMethodName                 = "/course_recommender.CourseRecommenderService/CreateCourse"
	CourseRecommenderService_GetCourse_FullMethodName                    = "/course_recommender.CourseRecommenderService/GetCourse"
	CourseRecommenderService_GetCourseByName_FullMethodName              = "/course_recommender.CourseRecommenderService/GetCourseByName"
	CourseRecommenderService_UpdateCourse_FullMethodName                 = "/course_recommender.CourseRecommenderService/UpdateCourse"
	CourseRecommenderService_ListCourses_FullMethodName                  = "/course_recommender.CourseRecommenderService/ListCourses"
	CourseRecommenderService_DeleteCourse_FullMethodName                 = "/course_recommender.CourseRecommenderService/DeleteCourse"
	CourseRecommenderService_CreateCourseQuestion_FullMethodName         = "/course_recommender.CourseRecommenderService/CreateCourseQuestion"
	CourseRecommenderService_GetCourseQuestion_FullMethodName            = "/course_recommender.CourseRecommenderService/GetCourseQuestion"
	CourseRecommenderService_UpdateCourseQuestion_FullMethodName         = "/course_recommender.CourseRecommenderService/UpdateCourseQuestion"
	CourseRecommenderService_ListCourseQuestions_FullMethodName          = "/course_recommender.CourseRecommenderService/ListCourseQuestions"
	CourseRecommenderService_DeleteCourseQuestion_FullMethodName         = "/course_recommender.CourseRecommenderService/DeleteCourseQuestion"
	CourseRecommenderService_GetCourseQuestionsByCourseId_FullMethodName = "/course_recommender.CourseRecommenderService/GetCourseQuestionsByCourseId"
	CourseRecommenderService_CreateCourseTag_FullMethodName              = "/course_recommender.CourseRecommenderService/CreateCourseTag"
	CourseRecommenderService_GetTagsByCourseId_FullMethodName            = "/course_recommender.CourseRecommenderService/GetTagsByCourseId"
	CourseRecommenderService_GetCoursesByTagId_FullMethodName            = "/course_recommender.CourseRecommenderService/GetCoursesByTagId"
	CourseRecommenderService_DeleteCourseTag_FullMethodName              = "/course_recommender.CourseRecommenderService/DeleteCourseTag"
	CourseRecommenderService_CreateDegreeCourse_FullMethodName           = "/course_recommender.CourseRecommenderService/CreateDegreeCourse"
	CourseRecommenderService_GetCoursesByDegreeId_FullMethodName         = "/course_recommender.CourseRecommenderService/GetCoursesByDegreeId"
	CourseRecommenderService_GetDegreesByCourseId_FullMethodName         = "/course_recommender.CourseRecommenderService/GetDegreesByCourseId"
	CourseRecommenderService_DeleteDegreeCourse_FullMethodName           = "/course_recommender.CourseRecommenderService/DeleteDegreeCourse"
	CourseRecommenderService_CreateDegreeType_FullMethodName             = "/course_recommender.CourseRecommenderService/CreateDegreeType"
	CourseRecommenderService_GetDegreeType_FullMethodName                = "/course_recommender.CourseRecommenderService/GetDegreeType"
	CourseRecommenderService_GetDegreeTypeByName_FullMethodName          = "/course_recommender.CourseRecommenderService/GetDegreeTypeByName"
	CourseRecommenderService_UpdateDegreeType_FullMethodName             = "/course_recommender.CourseRecommenderService/UpdateDegreeType"
	CourseRecommenderService_ListDegreeTypes_FullMethodName              = "/course_recommender.CourseRecommenderService/ListDegreeTypes"
	CourseRecommenderService_DeleteDegreeType_FullMethodName             = "/course_recommender.CourseRecommenderService/DeleteDegreeType"
	CourseRecommenderService_CreateStudent_FullMethodName                = "/course_recommender.CourseRecommenderService/CreateStudent"
	CourseRecommenderService_GetStudent_FullMethodName                   = "/course_recommender.CourseRecommenderService/GetStudent"
	CourseRecommenderService_GetStudentByUsername_FullMethodName         = "/course_recommender.CourseRecommenderService/GetStudentByUsername"
	CourseRecommenderService_UpdateStudent_FullMethodName                = "/course_recommender.CourseRecommenderService/UpdateStudent"
	CourseRecommenderService_ListStudents_FullMethodName                 = "/course_recommender.CourseRecommenderService/ListStudents"
	CourseRecommenderService_DeleteStudent_FullMethodName                = "/course_recommender.CourseRecommenderService/DeleteStudent"
	CourseRecommenderService_CreateStudentCourse_FullMethodName          = "/course_recommender.CourseRecommenderService/CreateStudentCourse"
	CourseRecommenderService_UpdateStudentCourse_FullMethodName          = "/course_recommender.CourseRecommenderService/UpdateStudentCourse"
	CourseRecommenderService_GetStudentsByCourseId_FullMethodName        = "/course_recommender.CourseRecommenderService/GetStudentsByCourseId"
	CourseRecommenderService_GetCoursesByStudentId_FullMethodName        = "/course_recommender.CourseRecommenderService/GetCoursesByStudentId"
	CourseRecommenderService_DeleteStudentCourse_FullMethodName          = "/course_recommender.CourseRecommenderService/DeleteStudentCourse"
	CourseRecommenderService_CreateTag_FullMethodName                    = "/course_recommender.CourseRecommenderService/CreateTag"
	CourseRecommenderService_GetTag_FullMethodName                       = "/course_recommender.CourseRecommenderService/GetTag"
	CourseRecommenderService_GetTagByName_FullMethodName                 = "/course_recommender.CourseRecommenderService/GetTagByName"
	CourseRecommenderService_UpdateTag_FullMethodName                    = "/course_recommender.CourseRecommenderService/UpdateTag"
	CourseRecommenderService_ListTags_FullMethodName                     = "/course_recommender.CourseRecommenderService/ListTags"
	CourseRecommenderService_DeleteTag_FullMethodName                    = "/course_recommender.CourseRecommenderService/DeleteTag"
)

// CourseRecommenderServiceClient is the client API for CourseRecommenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The root service that encompasses all other services in the course recommender system.
type CourseRecommenderServiceClient interface {
	// Creates a new course.
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	// Retrieves a course by its ID.
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
	// Retrieves courses by name.
	GetCourseByName(ctx context.Context, in *GetCourseByNameRequest, opts ...grpc.CallOption) (*GetCourseByNameResponse, error)
	// Updates an existing course.
	UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error)
	// Lists all courses.
	ListCourses(ctx context.Context, in *ListCoursesRequest, opts ...grpc.CallOption) (*ListCoursesResponse, error)
	// Deletes a course by its ID.
	DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error)
	// Creates a new course question.
	CreateCourseQuestion(ctx context.Context, in *CreateCourseQuestionRequest, opts ...grpc.CallOption) (*CreateCourseQuestionResponse, error)
	// Retrieves a course question by its ID.
	GetCourseQuestion(ctx context.Context, in *GetCourseQuestionRequest, opts ...grpc.CallOption) (*GetCourseQuestionResponse, error)
	// Updates an existing course question.
	UpdateCourseQuestion(ctx context.Context, in *UpdateCourseQuestionRequest, opts ...grpc.CallOption) (*UpdateCourseQuestionResponse, error)
	// Lists all course questions.
	ListCourseQuestions(ctx context.Context, in *ListCourseQuestionsRequest, opts ...grpc.CallOption) (*ListCourseQuestionsResponse, error)
	// Deletes a course question by its ID.
	DeleteCourseQuestion(ctx context.Context, in *DeleteCourseQuestionRequest, opts ...grpc.CallOption) (*DeleteCourseQuestionResponse, error)
	// Retrieves all questions for a specific course.
	GetCourseQuestionsByCourseId(ctx context.Context, in *GetCourseQuestionsByCourseIdRequest, opts ...grpc.CallOption) (*GetCourseQuestionsByCourseIdResponse, error)
	// Creates a new course-tag association.
	CreateCourseTag(ctx context.Context, in *CreateCourseTagRequest, opts ...grpc.CallOption) (*CreateCourseTagResponse, error)
	// Retrieves all tags for a specific course.
	GetTagsByCourseId(ctx context.Context, in *GetTagsByCourseIdRequest, opts ...grpc.CallOption) (*GetTagsByCourseIdResponse, error)
	// Retrieves all courses for a specific tag.
	GetCoursesByTagId(ctx context.Context, in *GetCoursesByTagIdRequest, opts ...grpc.CallOption) (*GetCoursesByTagIdResponse, error)
	// Deletes a course-tag association.
	DeleteCourseTag(ctx context.Context, in *DeleteCourseTagRequest, opts ...grpc.CallOption) (*DeleteCourseTagResponse, error)
	// Creates a new degree-course association.
	CreateDegreeCourse(ctx context.Context, in *CreateDegreeCourseRequest, opts ...grpc.CallOption) (*CreateDegreeCourseResponse, error)
	// Retrieves all courses for a specific degree type.
	GetCoursesByDegreeId(ctx context.Context, in *GetCoursesByDegreeIdRequest, opts ...grpc.CallOption) (*GetCoursesByDegreeIdResponse, error)
	// Retrieves all degree types for a specific course.
	GetDegreesByCourseId(ctx context.Context, in *GetDegreesByCourseIdRequest, opts ...grpc.CallOption) (*GetDegreesByCourseIdResponse, error)
	// Deletes a degree-course association.
	DeleteDegreeCourse(ctx context.Context, in *DeleteDegreeCourseRequest, opts ...grpc.CallOption) (*DeleteDegreeCourseResponse, error)
	// Creates a new degree type.
	CreateDegreeType(ctx context.Context, in *CreateDegreeTypeRequest, opts ...grpc.CallOption) (*CreateDegreeTypeResponse, error)
	// Retrieves a degree type by its ID.
	GetDegreeType(ctx context.Context, in *GetDegreeTypeRequest, opts ...grpc.CallOption) (*GetDegreeTypeResponse, error)
	// Retrieves degree types by name.
	GetDegreeTypeByName(ctx context.Context, in *GetDegreeTypeByNameRequest, opts ...grpc.CallOption) (*GetDegreeTypeByNameResponse, error)
	// Updates an existing degree type.
	UpdateDegreeType(ctx context.Context, in *UpdateDegreeTypeRequest, opts ...grpc.CallOption) (*UpdateDegreeTypeResponse, error)
	// Lists all degree types.
	ListDegreeTypes(ctx context.Context, in *ListDegreeTypesRequest, opts ...grpc.CallOption) (*ListDegreeTypesResponse, error)
	// Deletes a degree type by its ID.
	DeleteDegreeType(ctx context.Context, in *DeleteDegreeTypeRequest, opts ...grpc.CallOption) (*DeleteDegreeTypeResponse, error)
	// Creates a new student.
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error)
	// Retrieves a student by their ID.
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error)
	// Retrieves a student by their email.
	GetStudentByUsername(ctx context.Context, in *GetStudentByUsernameRequest, opts ...grpc.CallOption) (*GetStudentByUsernameResponse, error)
	// Updates an existing student's information.
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error)
	// Lists all students.
	ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...grpc.CallOption) (*ListStudentsResponse, error)
	// Deletes a student by their ID.
	DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*DeleteStudentResponse, error)
	// Creates a new student-course association.
	CreateStudentCourse(ctx context.Context, in *CreateStudentCourseRequest, opts ...grpc.CallOption) (*CreateStudentCourseResponse, error)
	// Updates a student's marks and feedback for a course.
	UpdateStudentCourse(ctx context.Context, in *UpdateStudentCourseRequest, opts ...grpc.CallOption) (*UpdateStudentCourseResponse, error)
	// Retrieves all students for a specific course.
	GetStudentsByCourseId(ctx context.Context, in *GetStudentsByCourseIdRequest, opts ...grpc.CallOption) (*GetStudentsByCourseIdResponse, error)
	// Retrieves all courses for a specific student.
	GetCoursesByStudentId(ctx context.Context, in *GetCoursesByStudentIdRequest, opts ...grpc.CallOption) (*GetCoursesByStudentIdResponse, error)
	// Deletes a student-course association.
	DeleteStudentCourse(ctx context.Context, in *DeleteStudentCourseRequest, opts ...grpc.CallOption) (*DeleteStudentCourseResponse, error)
	// Creates a new tag.
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	// Retrieves a tag by its ID.
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagResponse, error)
	// Retrieves tags by name.
	GetTagByName(ctx context.Context, in *GetTagByNameRequest, opts ...grpc.CallOption) (*GetTagByNameResponse, error)
	// Updates an existing tag.
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	// Lists all tags.
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	// Deletes a tag by its ID.
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
}

type courseRecommenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseRecommenderServiceClient(cc grpc.ClientConnInterface) CourseRecommenderServiceClient {
	return &courseRecommenderServiceClient{cc}
}

func (c *courseRecommenderServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCourseByName(ctx context.Context, in *GetCourseByNameRequest, opts ...grpc.CallOption) (*GetCourseByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseByNameResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCourseByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_UpdateCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) ListCourses(ctx context.Context, in *ListCoursesRequest, opts ...grpc.CallOption) (*ListCoursesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCoursesResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_ListCourses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*DeleteCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateCourseQuestion(ctx context.Context, in *CreateCourseQuestionRequest, opts ...grpc.CallOption) (*CreateCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCourseQuestion(ctx context.Context, in *GetCourseQuestionRequest, opts ...grpc.CallOption) (*GetCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) UpdateCourseQuestion(ctx context.Context, in *UpdateCourseQuestionRequest, opts ...grpc.CallOption) (*UpdateCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_UpdateCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) ListCourseQuestions(ctx context.Context, in *ListCourseQuestionsRequest, opts ...grpc.CallOption) (*ListCourseQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCourseQuestionsResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_ListCourseQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteCourseQuestion(ctx context.Context, in *DeleteCourseQuestionRequest, opts ...grpc.CallOption) (*DeleteCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCourseQuestionsByCourseId(ctx context.Context, in *GetCourseQuestionsByCourseIdRequest, opts ...grpc.CallOption) (*GetCourseQuestionsByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseQuestionsByCourseIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCourseQuestionsByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateCourseTag(ctx context.Context, in *CreateCourseTagRequest, opts ...grpc.CallOption) (*CreateCourseTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseTagResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateCourseTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetTagsByCourseId(ctx context.Context, in *GetTagsByCourseIdRequest, opts ...grpc.CallOption) (*GetTagsByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagsByCourseIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetTagsByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCoursesByTagId(ctx context.Context, in *GetCoursesByTagIdRequest, opts ...grpc.CallOption) (*GetCoursesByTagIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesByTagIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCoursesByTagId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteCourseTag(ctx context.Context, in *DeleteCourseTagRequest, opts ...grpc.CallOption) (*DeleteCourseTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseTagResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteCourseTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateDegreeCourse(ctx context.Context, in *CreateDegreeCourseRequest, opts ...grpc.CallOption) (*CreateDegreeCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDegreeCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateDegreeCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCoursesByDegreeId(ctx context.Context, in *GetCoursesByDegreeIdRequest, opts ...grpc.CallOption) (*GetCoursesByDegreeIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesByDegreeIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCoursesByDegreeId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetDegreesByCourseId(ctx context.Context, in *GetDegreesByCourseIdRequest, opts ...grpc.CallOption) (*GetDegreesByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDegreesByCourseIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetDegreesByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteDegreeCourse(ctx context.Context, in *DeleteDegreeCourseRequest, opts ...grpc.CallOption) (*DeleteDegreeCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDegreeCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteDegreeCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateDegreeType(ctx context.Context, in *CreateDegreeTypeRequest, opts ...grpc.CallOption) (*CreateDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDegreeTypeResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetDegreeType(ctx context.Context, in *GetDegreeTypeRequest, opts ...grpc.CallOption) (*GetDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDegreeTypeResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetDegreeTypeByName(ctx context.Context, in *GetDegreeTypeByNameRequest, opts ...grpc.CallOption) (*GetDegreeTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDegreeTypeByNameResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetDegreeTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) UpdateDegreeType(ctx context.Context, in *UpdateDegreeTypeRequest, opts ...grpc.CallOption) (*UpdateDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDegreeTypeResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_UpdateDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) ListDegreeTypes(ctx context.Context, in *ListDegreeTypesRequest, opts ...grpc.CallOption) (*ListDegreeTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDegreeTypesResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_ListDegreeTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteDegreeType(ctx context.Context, in *DeleteDegreeTypeRequest, opts ...grpc.CallOption) (*DeleteDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDegreeTypeResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudentResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetStudentByUsername(ctx context.Context, in *GetStudentByUsernameRequest, opts ...grpc.CallOption) (*GetStudentByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentByUsernameResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetStudentByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_UpdateStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...grpc.CallOption) (*ListStudentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStudentsResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_ListStudents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*DeleteStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStudentResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateStudentCourse(ctx context.Context, in *CreateStudentCourseRequest, opts ...grpc.CallOption) (*CreateStudentCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudentCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) UpdateStudentCourse(ctx context.Context, in *UpdateStudentCourseRequest, opts ...grpc.CallOption) (*UpdateStudentCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_UpdateStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetStudentsByCourseId(ctx context.Context, in *GetStudentsByCourseIdRequest, opts ...grpc.CallOption) (*GetStudentsByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentsByCourseIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetStudentsByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetCoursesByStudentId(ctx context.Context, in *GetCoursesByStudentIdRequest, opts ...grpc.CallOption) (*GetCoursesByStudentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesByStudentIdResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetCoursesByStudentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteStudentCourse(ctx context.Context, in *DeleteStudentCourseRequest, opts ...grpc.CallOption) (*DeleteStudentCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStudentCourseResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) GetTagByName(ctx context.Context, in *GetTagByNameRequest, opts ...grpc.CallOption) (*GetTagByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTagByNameResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_GetTagByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseRecommenderServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, CourseRecommenderService_DeleteTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseRecommenderServiceServer is the server API for CourseRecommenderService service.
// All implementations must embed UnimplementedCourseRecommenderServiceServer
// for forward compatibility.
//
// The root service that encompasses all other services in the course recommender system.
type CourseRecommenderServiceServer interface {
	// Creates a new course.
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	// Retrieves a course by its ID.
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	// Retrieves courses by name.
	GetCourseByName(context.Context, *GetCourseByNameRequest) (*GetCourseByNameResponse, error)
	// Updates an existing course.
	UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error)
	// Lists all courses.
	ListCourses(context.Context, *ListCoursesRequest) (*ListCoursesResponse, error)
	// Deletes a course by its ID.
	DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error)
	// Creates a new course question.
	CreateCourseQuestion(context.Context, *CreateCourseQuestionRequest) (*CreateCourseQuestionResponse, error)
	// Retrieves a course question by its ID.
	GetCourseQuestion(context.Context, *GetCourseQuestionRequest) (*GetCourseQuestionResponse, error)
	// Updates an existing course question.
	UpdateCourseQuestion(context.Context, *UpdateCourseQuestionRequest) (*UpdateCourseQuestionResponse, error)
	// Lists all course questions.
	ListCourseQuestions(context.Context, *ListCourseQuestionsRequest) (*ListCourseQuestionsResponse, error)
	// Deletes a course question by its ID.
	DeleteCourseQuestion(context.Context, *DeleteCourseQuestionRequest) (*DeleteCourseQuestionResponse, error)
	// Retrieves all questions for a specific course.
	GetCourseQuestionsByCourseId(context.Context, *GetCourseQuestionsByCourseIdRequest) (*GetCourseQuestionsByCourseIdResponse, error)
	// Creates a new course-tag association.
	CreateCourseTag(context.Context, *CreateCourseTagRequest) (*CreateCourseTagResponse, error)
	// Retrieves all tags for a specific course.
	GetTagsByCourseId(context.Context, *GetTagsByCourseIdRequest) (*GetTagsByCourseIdResponse, error)
	// Retrieves all courses for a specific tag.
	GetCoursesByTagId(context.Context, *GetCoursesByTagIdRequest) (*GetCoursesByTagIdResponse, error)
	// Deletes a course-tag association.
	DeleteCourseTag(context.Context, *DeleteCourseTagRequest) (*DeleteCourseTagResponse, error)
	// Creates a new degree-course association.
	CreateDegreeCourse(context.Context, *CreateDegreeCourseRequest) (*CreateDegreeCourseResponse, error)
	// Retrieves all courses for a specific degree type.
	GetCoursesByDegreeId(context.Context, *GetCoursesByDegreeIdRequest) (*GetCoursesByDegreeIdResponse, error)
	// Retrieves all degree types for a specific course.
	GetDegreesByCourseId(context.Context, *GetDegreesByCourseIdRequest) (*GetDegreesByCourseIdResponse, error)
	// Deletes a degree-course association.
	DeleteDegreeCourse(context.Context, *DeleteDegreeCourseRequest) (*DeleteDegreeCourseResponse, error)
	// Creates a new degree type.
	CreateDegreeType(context.Context, *CreateDegreeTypeRequest) (*CreateDegreeTypeResponse, error)
	// Retrieves a degree type by its ID.
	GetDegreeType(context.Context, *GetDegreeTypeRequest) (*GetDegreeTypeResponse, error)
	// Retrieves degree types by name.
	GetDegreeTypeByName(context.Context, *GetDegreeTypeByNameRequest) (*GetDegreeTypeByNameResponse, error)
	// Updates an existing degree type.
	UpdateDegreeType(context.Context, *UpdateDegreeTypeRequest) (*UpdateDegreeTypeResponse, error)
	// Lists all degree types.
	ListDegreeTypes(context.Context, *ListDegreeTypesRequest) (*ListDegreeTypesResponse, error)
	// Deletes a degree type by its ID.
	DeleteDegreeType(context.Context, *DeleteDegreeTypeRequest) (*DeleteDegreeTypeResponse, error)
	// Creates a new student.
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error)
	// Retrieves a student by their ID.
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error)
	// Retrieves a student by their email.
	GetStudentByUsername(context.Context, *GetStudentByUsernameRequest) (*GetStudentByUsernameResponse, error)
	// Updates an existing student's information.
	UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error)
	// Lists all students.
	ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error)
	// Deletes a student by their ID.
	DeleteStudent(context.Context, *DeleteStudentRequest) (*DeleteStudentResponse, error)
	// Creates a new student-course association.
	CreateStudentCourse(context.Context, *CreateStudentCourseRequest) (*CreateStudentCourseResponse, error)
	// Updates a student's marks and feedback for a course.
	UpdateStudentCourse(context.Context, *UpdateStudentCourseRequest) (*UpdateStudentCourseResponse, error)
	// Retrieves all students for a specific course.
	GetStudentsByCourseId(context.Context, *GetStudentsByCourseIdRequest) (*GetStudentsByCourseIdResponse, error)
	// Retrieves all courses for a specific student.
	GetCoursesByStudentId(context.Context, *GetCoursesByStudentIdRequest) (*GetCoursesByStudentIdResponse, error)
	// Deletes a student-course association.
	DeleteStudentCourse(context.Context, *DeleteStudentCourseRequest) (*DeleteStudentCourseResponse, error)
	// Creates a new tag.
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	// Retrieves a tag by its ID.
	GetTag(context.Context, *GetTagRequest) (*GetTagResponse, error)
	// Retrieves tags by name.
	GetTagByName(context.Context, *GetTagByNameRequest) (*GetTagByNameResponse, error)
	// Updates an existing tag.
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	// Lists all tags.
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	// Deletes a tag by its ID.
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	mustEmbedUnimplementedCourseRecommenderServiceServer()
}

// UnimplementedCourseRecommenderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourseRecommenderServiceServer struct{}

func (UnimplementedCourseRecommenderServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCourseByName(context.Context, *GetCourseByNameRequest) (*GetCourseByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseByName not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) ListCourses(context.Context, *ListCoursesRequest) (*ListCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourses not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteCourse(context.Context, *DeleteCourseRequest) (*DeleteCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateCourseQuestion(context.Context, *CreateCourseQuestionRequest) (*CreateCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseQuestion not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCourseQuestion(context.Context, *GetCourseQuestionRequest) (*GetCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseQuestion not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) UpdateCourseQuestion(context.Context, *UpdateCourseQuestionRequest) (*UpdateCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseQuestion not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) ListCourseQuestions(context.Context, *ListCourseQuestionsRequest) (*ListCourseQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseQuestions not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteCourseQuestion(context.Context, *DeleteCourseQuestionRequest) (*DeleteCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseQuestion not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCourseQuestionsByCourseId(context.Context, *GetCourseQuestionsByCourseIdRequest) (*GetCourseQuestionsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseQuestionsByCourseId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateCourseTag(context.Context, *CreateCourseTagRequest) (*CreateCourseTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseTag not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetTagsByCourseId(context.Context, *GetTagsByCourseIdRequest) (*GetTagsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsByCourseId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCoursesByTagId(context.Context, *GetCoursesByTagIdRequest) (*GetCoursesByTagIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByTagId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteCourseTag(context.Context, *DeleteCourseTagRequest) (*DeleteCourseTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseTag not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateDegreeCourse(context.Context, *CreateDegreeCourseRequest) (*CreateDegreeCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDegreeCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCoursesByDegreeId(context.Context, *GetCoursesByDegreeIdRequest) (*GetCoursesByDegreeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByDegreeId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetDegreesByCourseId(context.Context, *GetDegreesByCourseIdRequest) (*GetDegreesByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDegreesByCourseId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteDegreeCourse(context.Context, *DeleteDegreeCourseRequest) (*DeleteDegreeCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDegreeCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateDegreeType(context.Context, *CreateDegreeTypeRequest) (*CreateDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDegreeType not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetDegreeType(context.Context, *GetDegreeTypeRequest) (*GetDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDegreeType not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetDegreeTypeByName(context.Context, *GetDegreeTypeByNameRequest) (*GetDegreeTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDegreeTypeByName not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) UpdateDegreeType(context.Context, *UpdateDegreeTypeRequest) (*UpdateDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDegreeType not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) ListDegreeTypes(context.Context, *ListDegreeTypesRequest) (*ListDegreeTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDegreeTypes not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteDegreeType(context.Context, *DeleteDegreeTypeRequest) (*DeleteDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDegreeType not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetStudentByUsername(context.Context, *GetStudentByUsernameRequest) (*GetStudentByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentByUsername not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudents not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteStudent(context.Context, *DeleteStudentRequest) (*DeleteStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateStudentCourse(context.Context, *CreateStudentCourseRequest) (*CreateStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) UpdateStudentCourse(context.Context, *UpdateStudentCourseRequest) (*UpdateStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetStudentsByCourseId(context.Context, *GetStudentsByCourseIdRequest) (*GetStudentsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByCourseId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetCoursesByStudentId(context.Context, *GetCoursesByStudentIdRequest) (*GetCoursesByStudentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByStudentId not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteStudentCourse(context.Context, *DeleteStudentCourseRequest) (*DeleteStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentCourse not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetTag(context.Context, *GetTagRequest) (*GetTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) GetTagByName(context.Context, *GetTagByNameRequest) (*GetTagByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagByName not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedCourseRecommenderServiceServer) mustEmbedUnimplementedCourseRecommenderServiceServer() {
}
func (UnimplementedCourseRecommenderServiceServer) testEmbeddedByValue() {}

// UnsafeCourseRecommenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseRecommenderServiceServer will
// result in compilation errors.
type UnsafeCourseRecommenderServiceServer interface {
	mustEmbedUnimplementedCourseRecommenderServiceServer()
}

func RegisterCourseRecommenderServiceServer(s grpc.ServiceRegistrar, srv CourseRecommenderServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourseRecommenderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourseRecommenderService_ServiceDesc, srv)
}

func _CourseRecommenderService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCourseByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCourseByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCourseByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCourseByName(ctx, req.(*GetCourseByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_UpdateCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).UpdateCourse(ctx, req.(*UpdateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_ListCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).ListCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_ListCourses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).ListCourses(ctx, req.(*ListCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteCourse(ctx, req.(*DeleteCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateCourseQuestion(ctx, req.(*CreateCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCourseQuestion(ctx, req.(*GetCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_UpdateCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).UpdateCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_UpdateCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).UpdateCourseQuestion(ctx, req.(*UpdateCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_ListCourseQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).ListCourseQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_ListCourseQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).ListCourseQuestions(ctx, req.(*ListCourseQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteCourseQuestion(ctx, req.(*DeleteCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCourseQuestionsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseQuestionsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCourseQuestionsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCourseQuestionsByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCourseQuestionsByCourseId(ctx, req.(*GetCourseQuestionsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateCourseTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateCourseTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateCourseTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateCourseTag(ctx, req.(*CreateCourseTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetTagsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetTagsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetTagsByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetTagsByCourseId(ctx, req.(*GetTagsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCoursesByTagId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByTagIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCoursesByTagId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCoursesByTagId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCoursesByTagId(ctx, req.(*GetCoursesByTagIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteCourseTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteCourseTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteCourseTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteCourseTag(ctx, req.(*DeleteCourseTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateDegreeCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDegreeCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateDegreeCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateDegreeCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateDegreeCourse(ctx, req.(*CreateDegreeCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCoursesByDegreeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByDegreeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCoursesByDegreeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCoursesByDegreeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCoursesByDegreeId(ctx, req.(*GetCoursesByDegreeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetDegreesByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreesByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetDegreesByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetDegreesByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetDegreesByCourseId(ctx, req.(*GetDegreesByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteDegreeCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDegreeCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteDegreeCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteDegreeCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteDegreeCourse(ctx, req.(*DeleteDegreeCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateDegreeType(ctx, req.(*CreateDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetDegreeType(ctx, req.(*GetDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetDegreeTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreeTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetDegreeTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetDegreeTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetDegreeTypeByName(ctx, req.(*GetDegreeTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_UpdateDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).UpdateDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_UpdateDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).UpdateDegreeType(ctx, req.(*UpdateDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_ListDegreeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDegreeTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).ListDegreeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_ListDegreeTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).ListDegreeTypes(ctx, req.(*ListDegreeTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteDegreeType(ctx, req.(*DeleteDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetStudentByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetStudentByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetStudentByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetStudentByUsername(ctx, req.(*GetStudentByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_UpdateStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_ListStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).ListStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_ListStudents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).ListStudents(ctx, req.(*ListStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteStudent(ctx, req.(*DeleteStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateStudentCourse(ctx, req.(*CreateStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_UpdateStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).UpdateStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_UpdateStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).UpdateStudentCourse(ctx, req.(*UpdateStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetStudentsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetStudentsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetStudentsByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetStudentsByCourseId(ctx, req.(*GetStudentsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetCoursesByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByStudentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetCoursesByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetCoursesByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetCoursesByStudentId(ctx, req.(*GetCoursesByStudentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteStudentCourse(ctx, req.(*DeleteStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_GetTagByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).GetTagByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_GetTagByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).GetTagByName(ctx, req.(*GetTagByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseRecommenderService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseRecommenderServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseRecommenderService_DeleteTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseRecommenderServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseRecommenderService_ServiceDesc is the grpc.ServiceDesc for CourseRecommenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseRecommenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_recommender.CourseRecommenderService",
	HandlerType: (*CourseRecommenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourse",
			Handler:    _CourseRecommenderService_CreateCourse_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _CourseRecommenderService_GetCourse_Handler,
		},
		{
			MethodName: "GetCourseByName",
			Handler:    _CourseRecommenderService_GetCourseByName_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _CourseRecommenderService_UpdateCourse_Handler,
		},
		{
			MethodName: "ListCourses",
			Handler:    _CourseRecommenderService_ListCourses_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _CourseRecommenderService_DeleteCourse_Handler,
		},
		{
			MethodName: "CreateCourseQuestion",
			Handler:    _CourseRecommenderService_CreateCourseQuestion_Handler,
		},
		{
			MethodName: "GetCourseQuestion",
			Handler:    _CourseRecommenderService_GetCourseQuestion_Handler,
		},
		{
			MethodName: "UpdateCourseQuestion",
			Handler:    _CourseRecommenderService_UpdateCourseQuestion_Handler,
		},
		{
			MethodName: "ListCourseQuestions",
			Handler:    _CourseRecommenderService_ListCourseQuestions_Handler,
		},
		{
			MethodName: "DeleteCourseQuestion",
			Handler:    _CourseRecommenderService_DeleteCourseQuestion_Handler,
		},
		{
			MethodName: "GetCourseQuestionsByCourseId",
			Handler:    _CourseRecommenderService_GetCourseQuestionsByCourseId_Handler,
		},
		{
			MethodName: "CreateCourseTag",
			Handler:    _CourseRecommenderService_CreateCourseTag_Handler,
		},
		{
			MethodName: "GetTagsByCourseId",
			Handler:    _CourseRecommenderService_GetTagsByCourseId_Handler,
		},
		{
			MethodName: "GetCoursesByTagId",
			Handler:    _CourseRecommenderService_GetCoursesByTagId_Handler,
		},
		{
			MethodName: "DeleteCourseTag",
			Handler:    _CourseRecommenderService_DeleteCourseTag_Handler,
		},
		{
			MethodName: "CreateDegreeCourse",
			Handler:    _CourseRecommenderService_CreateDegreeCourse_Handler,
		},
		{
			MethodName: "GetCoursesByDegreeId",
			Handler:    _CourseRecommenderService_GetCoursesByDegreeId_Handler,
		},
		{
			MethodName: "GetDegreesByCourseId",
			Handler:    _CourseRecommenderService_GetDegreesByCourseId_Handler,
		},
		{
			MethodName: "DeleteDegreeCourse",
			Handler:    _CourseRecommenderService_DeleteDegreeCourse_Handler,
		},
		{
			MethodName: "CreateDegreeType",
			Handler:    _CourseRecommenderService_CreateDegreeType_Handler,
		},
		{
			MethodName: "GetDegreeType",
			Handler:    _CourseRecommenderService_GetDegreeType_Handler,
		},
		{
			MethodName: "GetDegreeTypeByName",
			Handler:    _CourseRecommenderService_GetDegreeTypeByName_Handler,
		},
		{
			MethodName: "UpdateDegreeType",
			Handler:    _CourseRecommenderService_UpdateDegreeType_Handler,
		},
		{
			MethodName: "ListDegreeTypes",
			Handler:    _CourseRecommenderService_ListDegreeTypes_Handler,
		},
		{
			MethodName: "DeleteDegreeType",
			Handler:    _CourseRecommenderService_DeleteDegreeType_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _CourseRecommenderService_CreateStudent_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _CourseRecommenderService_GetStudent_Handler,
		},
		{
			MethodName: "GetStudentByUsername",
			Handler:    _CourseRecommenderService_GetStudentByUsername_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _CourseRecommenderService_UpdateStudent_Handler,
		},
		{
			MethodName: "ListStudents",
			Handler:    _CourseRecommenderService_ListStudents_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _CourseRecommenderService_DeleteStudent_Handler,
		},
		{
			MethodName: "CreateStudentCourse",
			Handler:    _CourseRecommenderService_CreateStudentCourse_Handler,
		},
		{
			MethodName: "UpdateStudentCourse",
			Handler:    _CourseRecommenderService_UpdateStudentCourse_Handler,
		},
		{
			MethodName: "GetStudentsByCourseId",
			Handler:    _CourseRecommenderService_GetStudentsByCourseId_Handler,
		},
		{
			MethodName: "GetCoursesByStudentId",
			Handler:    _CourseRecommenderService_GetCoursesByStudentId_Handler,
		},
		{
			MethodName: "DeleteStudentCourse",
			Handler:    _CourseRecommenderService_DeleteStudentCourse_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _CourseRecommenderService_CreateTag_Handler,
		},
		{
			MethodName: "GetTag",
			Handler:    _CourseRecommenderService_GetTag_Handler,
		},
		{
			MethodName: "GetTagByName",
			Handler:    _CourseRecommenderService_GetTagByName_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _CourseRecommenderService_UpdateTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _CourseRecommenderService_ListTags_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _CourseRecommenderService_DeleteTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "root.proto",
}
