// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: degree_type.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DegreeTypeService_CreateDegreeType_FullMethodName    = "/course_recommender.DegreeTypeService/CreateDegreeType"
	DegreeTypeService_GetDegreeType_FullMethodName       = "/course_recommender.DegreeTypeService/GetDegreeType"
	DegreeTypeService_GetDegreeTypeByName_FullMethodName = "/course_recommender.DegreeTypeService/GetDegreeTypeByName"
	DegreeTypeService_UpdateDegreeType_FullMethodName    = "/course_recommender.DegreeTypeService/UpdateDegreeType"
	DegreeTypeService_ListDegreeTypes_FullMethodName     = "/course_recommender.DegreeTypeService/ListDegreeTypes"
	DegreeTypeService_DeleteDegreeType_FullMethodName    = "/course_recommender.DegreeTypeService/DeleteDegreeType"
)

// DegreeTypeServiceClient is the client API for DegreeTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The gRPC service definition for degree types.
type DegreeTypeServiceClient interface {
	// Creates a new degree type.
	CreateDegreeType(ctx context.Context, in *CreateDegreeTypeRequest, opts ...grpc.CallOption) (*CreateDegreeTypeResponse, error)
	// Retrieves a degree type by its ID.
	GetDegreeType(ctx context.Context, in *GetDegreeTypeRequest, opts ...grpc.CallOption) (*GetDegreeTypeResponse, error)
	// Retrieves degree types by name.
	GetDegreeTypeByName(ctx context.Context, in *GetDegreeTypeByNameRequest, opts ...grpc.CallOption) (*GetDegreeTypeByNameResponse, error)
	// Updates an existing degree type.
	UpdateDegreeType(ctx context.Context, in *UpdateDegreeTypeRequest, opts ...grpc.CallOption) (*UpdateDegreeTypeResponse, error)
	// Lists all degree types.
	ListDegreeTypes(ctx context.Context, in *ListDegreeTypesRequest, opts ...grpc.CallOption) (*ListDegreeTypesResponse, error)
	// Deletes a degree type by its ID.
	DeleteDegreeType(ctx context.Context, in *DeleteDegreeTypeRequest, opts ...grpc.CallOption) (*DeleteDegreeTypeResponse, error)
}

type degreeTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDegreeTypeServiceClient(cc grpc.ClientConnInterface) DegreeTypeServiceClient {
	return &degreeTypeServiceClient{cc}
}

func (c *degreeTypeServiceClient) CreateDegreeType(ctx context.Context, in *CreateDegreeTypeRequest, opts ...grpc.CallOption) (*CreateDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDegreeTypeResponse)
	err := c.cc.Invoke(ctx, DegreeTypeService_CreateDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeTypeServiceClient) GetDegreeType(ctx context.Context, in *GetDegreeTypeRequest, opts ...grpc.CallOption) (*GetDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDegreeTypeResponse)
	err := c.cc.Invoke(ctx, DegreeTypeService_GetDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeTypeServiceClient) GetDegreeTypeByName(ctx context.Context, in *GetDegreeTypeByNameRequest, opts ...grpc.CallOption) (*GetDegreeTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDegreeTypeByNameResponse)
	err := c.cc.Invoke(ctx, DegreeTypeService_GetDegreeTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeTypeServiceClient) UpdateDegreeType(ctx context.Context, in *UpdateDegreeTypeRequest, opts ...grpc.CallOption) (*UpdateDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDegreeTypeResponse)
	err := c.cc.Invoke(ctx, DegreeTypeService_UpdateDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeTypeServiceClient) ListDegreeTypes(ctx context.Context, in *ListDegreeTypesRequest, opts ...grpc.CallOption) (*ListDegreeTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDegreeTypesResponse)
	err := c.cc.Invoke(ctx, DegreeTypeService_ListDegreeTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeTypeServiceClient) DeleteDegreeType(ctx context.Context, in *DeleteDegreeTypeRequest, opts ...grpc.CallOption) (*DeleteDegreeTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDegreeTypeResponse)
	err := c.cc.Invoke(ctx, DegreeTypeService_DeleteDegreeType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DegreeTypeServiceServer is the server API for DegreeTypeService service.
// All implementations must embed UnimplementedDegreeTypeServiceServer
// for forward compatibility.
//
// The gRPC service definition for degree types.
type DegreeTypeServiceServer interface {
	// Creates a new degree type.
	CreateDegreeType(context.Context, *CreateDegreeTypeRequest) (*CreateDegreeTypeResponse, error)
	// Retrieves a degree type by its ID.
	GetDegreeType(context.Context, *GetDegreeTypeRequest) (*GetDegreeTypeResponse, error)
	// Retrieves degree types by name.
	GetDegreeTypeByName(context.Context, *GetDegreeTypeByNameRequest) (*GetDegreeTypeByNameResponse, error)
	// Updates an existing degree type.
	UpdateDegreeType(context.Context, *UpdateDegreeTypeRequest) (*UpdateDegreeTypeResponse, error)
	// Lists all degree types.
	ListDegreeTypes(context.Context, *ListDegreeTypesRequest) (*ListDegreeTypesResponse, error)
	// Deletes a degree type by its ID.
	DeleteDegreeType(context.Context, *DeleteDegreeTypeRequest) (*DeleteDegreeTypeResponse, error)
	mustEmbedUnimplementedDegreeTypeServiceServer()
}

// UnimplementedDegreeTypeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDegreeTypeServiceServer struct{}

func (UnimplementedDegreeTypeServiceServer) CreateDegreeType(context.Context, *CreateDegreeTypeRequest) (*CreateDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDegreeType not implemented")
}
func (UnimplementedDegreeTypeServiceServer) GetDegreeType(context.Context, *GetDegreeTypeRequest) (*GetDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDegreeType not implemented")
}
func (UnimplementedDegreeTypeServiceServer) GetDegreeTypeByName(context.Context, *GetDegreeTypeByNameRequest) (*GetDegreeTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDegreeTypeByName not implemented")
}
func (UnimplementedDegreeTypeServiceServer) UpdateDegreeType(context.Context, *UpdateDegreeTypeRequest) (*UpdateDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDegreeType not implemented")
}
func (UnimplementedDegreeTypeServiceServer) ListDegreeTypes(context.Context, *ListDegreeTypesRequest) (*ListDegreeTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDegreeTypes not implemented")
}
func (UnimplementedDegreeTypeServiceServer) DeleteDegreeType(context.Context, *DeleteDegreeTypeRequest) (*DeleteDegreeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDegreeType not implemented")
}
func (UnimplementedDegreeTypeServiceServer) mustEmbedUnimplementedDegreeTypeServiceServer() {}
func (UnimplementedDegreeTypeServiceServer) testEmbeddedByValue()                           {}

// UnsafeDegreeTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DegreeTypeServiceServer will
// result in compilation errors.
type UnsafeDegreeTypeServiceServer interface {
	mustEmbedUnimplementedDegreeTypeServiceServer()
}

func RegisterDegreeTypeServiceServer(s grpc.ServiceRegistrar, srv DegreeTypeServiceServer) {
	// If the following call pancis, it indicates UnimplementedDegreeTypeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DegreeTypeService_ServiceDesc, srv)
}

func _DegreeTypeService_CreateDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeTypeServiceServer).CreateDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeTypeService_CreateDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeTypeServiceServer).CreateDegreeType(ctx, req.(*CreateDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeTypeService_GetDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeTypeServiceServer).GetDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeTypeService_GetDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeTypeServiceServer).GetDegreeType(ctx, req.(*GetDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeTypeService_GetDegreeTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreeTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeTypeServiceServer).GetDegreeTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeTypeService_GetDegreeTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeTypeServiceServer).GetDegreeTypeByName(ctx, req.(*GetDegreeTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeTypeService_UpdateDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeTypeServiceServer).UpdateDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeTypeService_UpdateDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeTypeServiceServer).UpdateDegreeType(ctx, req.(*UpdateDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeTypeService_ListDegreeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDegreeTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeTypeServiceServer).ListDegreeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeTypeService_ListDegreeTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeTypeServiceServer).ListDegreeTypes(ctx, req.(*ListDegreeTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeTypeService_DeleteDegreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDegreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeTypeServiceServer).DeleteDegreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeTypeService_DeleteDegreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeTypeServiceServer).DeleteDegreeType(ctx, req.(*DeleteDegreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DegreeTypeService_ServiceDesc is the grpc.ServiceDesc for DegreeTypeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DegreeTypeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_recommender.DegreeTypeService",
	HandlerType: (*DegreeTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDegreeType",
			Handler:    _DegreeTypeService_CreateDegreeType_Handler,
		},
		{
			MethodName: "GetDegreeType",
			Handler:    _DegreeTypeService_GetDegreeType_Handler,
		},
		{
			MethodName: "GetDegreeTypeByName",
			Handler:    _DegreeTypeService_GetDegreeTypeByName_Handler,
		},
		{
			MethodName: "UpdateDegreeType",
			Handler:    _DegreeTypeService_UpdateDegreeType_Handler,
		},
		{
			MethodName: "ListDegreeTypes",
			Handler:    _DegreeTypeService_ListDegreeTypes_Handler,
		},
		{
			MethodName: "DeleteDegreeType",
			Handler:    _DegreeTypeService_DeleteDegreeType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "degree_type.proto",
}
