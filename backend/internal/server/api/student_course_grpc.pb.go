// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: student_course.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudentCourseService_CreateStudentCourse_FullMethodName   = "/course_recommender.StudentCourseService/CreateStudentCourse"
	StudentCourseService_UpdateStudentCourse_FullMethodName   = "/course_recommender.StudentCourseService/UpdateStudentCourse"
	StudentCourseService_GetStudentsByCourseId_FullMethodName = "/course_recommender.StudentCourseService/GetStudentsByCourseId"
	StudentCourseService_GetCoursesByStudentId_FullMethodName = "/course_recommender.StudentCourseService/GetCoursesByStudentId"
	StudentCourseService_DeleteStudentCourse_FullMethodName   = "/course_recommender.StudentCourseService/DeleteStudentCourse"
)

// StudentCourseServiceClient is the client API for StudentCourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The gRPC service definition for student-course associations.
type StudentCourseServiceClient interface {
	// Creates a new student-course association.
	CreateStudentCourse(ctx context.Context, in *CreateStudentCourseRequest, opts ...grpc.CallOption) (*CreateStudentCourseResponse, error)
	// Updates a student's marks and feedback for a course.
	UpdateStudentCourse(ctx context.Context, in *UpdateStudentCourseRequest, opts ...grpc.CallOption) (*UpdateStudentCourseResponse, error)
	// Retrieves all students for a specific course.
	GetStudentsByCourseId(ctx context.Context, in *GetStudentsByCourseIdRequest, opts ...grpc.CallOption) (*GetStudentsByCourseIdResponse, error)
	// Retrieves all courses for a specific student.
	GetCoursesByStudentId(ctx context.Context, in *GetCoursesByStudentIdRequest, opts ...grpc.CallOption) (*GetCoursesByStudentIdResponse, error)
	// Deletes a student-course association.
	DeleteStudentCourse(ctx context.Context, in *DeleteStudentCourseRequest, opts ...grpc.CallOption) (*DeleteStudentCourseResponse, error)
}

type studentCourseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentCourseServiceClient(cc grpc.ClientConnInterface) StudentCourseServiceClient {
	return &studentCourseServiceClient{cc}
}

func (c *studentCourseServiceClient) CreateStudentCourse(ctx context.Context, in *CreateStudentCourseRequest, opts ...grpc.CallOption) (*CreateStudentCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStudentCourseResponse)
	err := c.cc.Invoke(ctx, StudentCourseService_CreateStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentCourseServiceClient) UpdateStudentCourse(ctx context.Context, in *UpdateStudentCourseRequest, opts ...grpc.CallOption) (*UpdateStudentCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStudentCourseResponse)
	err := c.cc.Invoke(ctx, StudentCourseService_UpdateStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentCourseServiceClient) GetStudentsByCourseId(ctx context.Context, in *GetStudentsByCourseIdRequest, opts ...grpc.CallOption) (*GetStudentsByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStudentsByCourseIdResponse)
	err := c.cc.Invoke(ctx, StudentCourseService_GetStudentsByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentCourseServiceClient) GetCoursesByStudentId(ctx context.Context, in *GetCoursesByStudentIdRequest, opts ...grpc.CallOption) (*GetCoursesByStudentIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesByStudentIdResponse)
	err := c.cc.Invoke(ctx, StudentCourseService_GetCoursesByStudentId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentCourseServiceClient) DeleteStudentCourse(ctx context.Context, in *DeleteStudentCourseRequest, opts ...grpc.CallOption) (*DeleteStudentCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStudentCourseResponse)
	err := c.cc.Invoke(ctx, StudentCourseService_DeleteStudentCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentCourseServiceServer is the server API for StudentCourseService service.
// All implementations must embed UnimplementedStudentCourseServiceServer
// for forward compatibility.
//
// The gRPC service definition for student-course associations.
type StudentCourseServiceServer interface {
	// Creates a new student-course association.
	CreateStudentCourse(context.Context, *CreateStudentCourseRequest) (*CreateStudentCourseResponse, error)
	// Updates a student's marks and feedback for a course.
	UpdateStudentCourse(context.Context, *UpdateStudentCourseRequest) (*UpdateStudentCourseResponse, error)
	// Retrieves all students for a specific course.
	GetStudentsByCourseId(context.Context, *GetStudentsByCourseIdRequest) (*GetStudentsByCourseIdResponse, error)
	// Retrieves all courses for a specific student.
	GetCoursesByStudentId(context.Context, *GetCoursesByStudentIdRequest) (*GetCoursesByStudentIdResponse, error)
	// Deletes a student-course association.
	DeleteStudentCourse(context.Context, *DeleteStudentCourseRequest) (*DeleteStudentCourseResponse, error)
	mustEmbedUnimplementedStudentCourseServiceServer()
}

// UnimplementedStudentCourseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentCourseServiceServer struct{}

func (UnimplementedStudentCourseServiceServer) CreateStudentCourse(context.Context, *CreateStudentCourseRequest) (*CreateStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentCourse not implemented")
}
func (UnimplementedStudentCourseServiceServer) UpdateStudentCourse(context.Context, *UpdateStudentCourseRequest) (*UpdateStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentCourse not implemented")
}
func (UnimplementedStudentCourseServiceServer) GetStudentsByCourseId(context.Context, *GetStudentsByCourseIdRequest) (*GetStudentsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByCourseId not implemented")
}
func (UnimplementedStudentCourseServiceServer) GetCoursesByStudentId(context.Context, *GetCoursesByStudentIdRequest) (*GetCoursesByStudentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByStudentId not implemented")
}
func (UnimplementedStudentCourseServiceServer) DeleteStudentCourse(context.Context, *DeleteStudentCourseRequest) (*DeleteStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentCourse not implemented")
}
func (UnimplementedStudentCourseServiceServer) mustEmbedUnimplementedStudentCourseServiceServer() {}
func (UnimplementedStudentCourseServiceServer) testEmbeddedByValue()                              {}

// UnsafeStudentCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentCourseServiceServer will
// result in compilation errors.
type UnsafeStudentCourseServiceServer interface {
	mustEmbedUnimplementedStudentCourseServiceServer()
}

func RegisterStudentCourseServiceServer(s grpc.ServiceRegistrar, srv StudentCourseServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudentCourseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentCourseService_ServiceDesc, srv)
}

func _StudentCourseService_CreateStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentCourseServiceServer).CreateStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentCourseService_CreateStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentCourseServiceServer).CreateStudentCourse(ctx, req.(*CreateStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentCourseService_UpdateStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentCourseServiceServer).UpdateStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentCourseService_UpdateStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentCourseServiceServer).UpdateStudentCourse(ctx, req.(*UpdateStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentCourseService_GetStudentsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentCourseServiceServer).GetStudentsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentCourseService_GetStudentsByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentCourseServiceServer).GetStudentsByCourseId(ctx, req.(*GetStudentsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentCourseService_GetCoursesByStudentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByStudentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentCourseServiceServer).GetCoursesByStudentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentCourseService_GetCoursesByStudentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentCourseServiceServer).GetCoursesByStudentId(ctx, req.(*GetCoursesByStudentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentCourseService_DeleteStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentCourseServiceServer).DeleteStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentCourseService_DeleteStudentCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentCourseServiceServer).DeleteStudentCourse(ctx, req.(*DeleteStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentCourseService_ServiceDesc is the grpc.ServiceDesc for StudentCourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentCourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_recommender.StudentCourseService",
	HandlerType: (*StudentCourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudentCourse",
			Handler:    _StudentCourseService_CreateStudentCourse_Handler,
		},
		{
			MethodName: "UpdateStudentCourse",
			Handler:    _StudentCourseService_UpdateStudentCourse_Handler,
		},
		{
			MethodName: "GetStudentsByCourseId",
			Handler:    _StudentCourseService_GetStudentsByCourseId_Handler,
		},
		{
			MethodName: "GetCoursesByStudentId",
			Handler:    _StudentCourseService_GetCoursesByStudentId_Handler,
		},
		{
			MethodName: "DeleteStudentCourse",
			Handler:    _StudentCourseService_DeleteStudentCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student_course.proto",
}
