// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: course_question.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourseQuestionService_CreateCourseQuestion_FullMethodName         = "/course_recommender.CourseQuestionService/CreateCourseQuestion"
	CourseQuestionService_GetCourseQuestion_FullMethodName            = "/course_recommender.CourseQuestionService/GetCourseQuestion"
	CourseQuestionService_UpdateCourseQuestion_FullMethodName         = "/course_recommender.CourseQuestionService/UpdateCourseQuestion"
	CourseQuestionService_ListCourseQuestions_FullMethodName          = "/course_recommender.CourseQuestionService/ListCourseQuestions"
	CourseQuestionService_DeleteCourseQuestion_FullMethodName         = "/course_recommender.CourseQuestionService/DeleteCourseQuestion"
	CourseQuestionService_GetCourseQuestionsByCourseId_FullMethodName = "/course_recommender.CourseQuestionService/GetCourseQuestionsByCourseId"
)

// CourseQuestionServiceClient is the client API for CourseQuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The gRPC service definition for course questions.
type CourseQuestionServiceClient interface {
	// Creates a new course question.
	CreateCourseQuestion(ctx context.Context, in *CreateCourseQuestionRequest, opts ...grpc.CallOption) (*CreateCourseQuestionResponse, error)
	// Retrieves a course question by its ID.
	GetCourseQuestion(ctx context.Context, in *GetCourseQuestionRequest, opts ...grpc.CallOption) (*GetCourseQuestionResponse, error)
	// Updates an existing course question.
	UpdateCourseQuestion(ctx context.Context, in *UpdateCourseQuestionRequest, opts ...grpc.CallOption) (*UpdateCourseQuestionResponse, error)
	// Lists all course questions.
	ListCourseQuestions(ctx context.Context, in *ListCourseQuestionsRequest, opts ...grpc.CallOption) (*ListCourseQuestionsResponse, error)
	// Deletes a course question by its ID.
	DeleteCourseQuestion(ctx context.Context, in *DeleteCourseQuestionRequest, opts ...grpc.CallOption) (*DeleteCourseQuestionResponse, error)
	// Retrieves all questions for a specific course.
	GetCourseQuestionsByCourseId(ctx context.Context, in *GetCourseQuestionsByCourseIdRequest, opts ...grpc.CallOption) (*GetCourseQuestionsByCourseIdResponse, error)
}

type courseQuestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseQuestionServiceClient(cc grpc.ClientConnInterface) CourseQuestionServiceClient {
	return &courseQuestionServiceClient{cc}
}

func (c *courseQuestionServiceClient) CreateCourseQuestion(ctx context.Context, in *CreateCourseQuestionRequest, opts ...grpc.CallOption) (*CreateCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseQuestionService_CreateCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseQuestionServiceClient) GetCourseQuestion(ctx context.Context, in *GetCourseQuestionRequest, opts ...grpc.CallOption) (*GetCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseQuestionService_GetCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseQuestionServiceClient) UpdateCourseQuestion(ctx context.Context, in *UpdateCourseQuestionRequest, opts ...grpc.CallOption) (*UpdateCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseQuestionService_UpdateCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseQuestionServiceClient) ListCourseQuestions(ctx context.Context, in *ListCourseQuestionsRequest, opts ...grpc.CallOption) (*ListCourseQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCourseQuestionsResponse)
	err := c.cc.Invoke(ctx, CourseQuestionService_ListCourseQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseQuestionServiceClient) DeleteCourseQuestion(ctx context.Context, in *DeleteCourseQuestionRequest, opts ...grpc.CallOption) (*DeleteCourseQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourseQuestionResponse)
	err := c.cc.Invoke(ctx, CourseQuestionService_DeleteCourseQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseQuestionServiceClient) GetCourseQuestionsByCourseId(ctx context.Context, in *GetCourseQuestionsByCourseIdRequest, opts ...grpc.CallOption) (*GetCourseQuestionsByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseQuestionsByCourseIdResponse)
	err := c.cc.Invoke(ctx, CourseQuestionService_GetCourseQuestionsByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseQuestionServiceServer is the server API for CourseQuestionService service.
// All implementations must embed UnimplementedCourseQuestionServiceServer
// for forward compatibility.
//
// The gRPC service definition for course questions.
type CourseQuestionServiceServer interface {
	// Creates a new course question.
	CreateCourseQuestion(context.Context, *CreateCourseQuestionRequest) (*CreateCourseQuestionResponse, error)
	// Retrieves a course question by its ID.
	GetCourseQuestion(context.Context, *GetCourseQuestionRequest) (*GetCourseQuestionResponse, error)
	// Updates an existing course question.
	UpdateCourseQuestion(context.Context, *UpdateCourseQuestionRequest) (*UpdateCourseQuestionResponse, error)
	// Lists all course questions.
	ListCourseQuestions(context.Context, *ListCourseQuestionsRequest) (*ListCourseQuestionsResponse, error)
	// Deletes a course question by its ID.
	DeleteCourseQuestion(context.Context, *DeleteCourseQuestionRequest) (*DeleteCourseQuestionResponse, error)
	// Retrieves all questions for a specific course.
	GetCourseQuestionsByCourseId(context.Context, *GetCourseQuestionsByCourseIdRequest) (*GetCourseQuestionsByCourseIdResponse, error)
	mustEmbedUnimplementedCourseQuestionServiceServer()
}

// UnimplementedCourseQuestionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourseQuestionServiceServer struct{}

func (UnimplementedCourseQuestionServiceServer) CreateCourseQuestion(context.Context, *CreateCourseQuestionRequest) (*CreateCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseQuestion not implemented")
}
func (UnimplementedCourseQuestionServiceServer) GetCourseQuestion(context.Context, *GetCourseQuestionRequest) (*GetCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseQuestion not implemented")
}
func (UnimplementedCourseQuestionServiceServer) UpdateCourseQuestion(context.Context, *UpdateCourseQuestionRequest) (*UpdateCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseQuestion not implemented")
}
func (UnimplementedCourseQuestionServiceServer) ListCourseQuestions(context.Context, *ListCourseQuestionsRequest) (*ListCourseQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseQuestions not implemented")
}
func (UnimplementedCourseQuestionServiceServer) DeleteCourseQuestion(context.Context, *DeleteCourseQuestionRequest) (*DeleteCourseQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseQuestion not implemented")
}
func (UnimplementedCourseQuestionServiceServer) GetCourseQuestionsByCourseId(context.Context, *GetCourseQuestionsByCourseIdRequest) (*GetCourseQuestionsByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseQuestionsByCourseId not implemented")
}
func (UnimplementedCourseQuestionServiceServer) mustEmbedUnimplementedCourseQuestionServiceServer() {}
func (UnimplementedCourseQuestionServiceServer) testEmbeddedByValue()                               {}

// UnsafeCourseQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseQuestionServiceServer will
// result in compilation errors.
type UnsafeCourseQuestionServiceServer interface {
	mustEmbedUnimplementedCourseQuestionServiceServer()
}

func RegisterCourseQuestionServiceServer(s grpc.ServiceRegistrar, srv CourseQuestionServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourseQuestionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourseQuestionService_ServiceDesc, srv)
}

func _CourseQuestionService_CreateCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseQuestionServiceServer).CreateCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseQuestionService_CreateCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseQuestionServiceServer).CreateCourseQuestion(ctx, req.(*CreateCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseQuestionService_GetCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseQuestionServiceServer).GetCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseQuestionService_GetCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseQuestionServiceServer).GetCourseQuestion(ctx, req.(*GetCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseQuestionService_UpdateCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseQuestionServiceServer).UpdateCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseQuestionService_UpdateCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseQuestionServiceServer).UpdateCourseQuestion(ctx, req.(*UpdateCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseQuestionService_ListCourseQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseQuestionServiceServer).ListCourseQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseQuestionService_ListCourseQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseQuestionServiceServer).ListCourseQuestions(ctx, req.(*ListCourseQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseQuestionService_DeleteCourseQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseQuestionServiceServer).DeleteCourseQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseQuestionService_DeleteCourseQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseQuestionServiceServer).DeleteCourseQuestion(ctx, req.(*DeleteCourseQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseQuestionService_GetCourseQuestionsByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseQuestionsByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseQuestionServiceServer).GetCourseQuestionsByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourseQuestionService_GetCourseQuestionsByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseQuestionServiceServer).GetCourseQuestionsByCourseId(ctx, req.(*GetCourseQuestionsByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseQuestionService_ServiceDesc is the grpc.ServiceDesc for CourseQuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseQuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_recommender.CourseQuestionService",
	HandlerType: (*CourseQuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourseQuestion",
			Handler:    _CourseQuestionService_CreateCourseQuestion_Handler,
		},
		{
			MethodName: "GetCourseQuestion",
			Handler:    _CourseQuestionService_GetCourseQuestion_Handler,
		},
		{
			MethodName: "UpdateCourseQuestion",
			Handler:    _CourseQuestionService_UpdateCourseQuestion_Handler,
		},
		{
			MethodName: "ListCourseQuestions",
			Handler:    _CourseQuestionService_ListCourseQuestions_Handler,
		},
		{
			MethodName: "DeleteCourseQuestion",
			Handler:    _CourseQuestionService_DeleteCourseQuestion_Handler,
		},
		{
			MethodName: "GetCourseQuestionsByCourseId",
			Handler:    _CourseQuestionService_GetCourseQuestionsByCourseId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "course_question.proto",
}
