// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: degree_course.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DegreeCourseService_CreateDegreeCourse_FullMethodName   = "/course_recommender.DegreeCourseService/CreateDegreeCourse"
	DegreeCourseService_GetCoursesByDegreeId_FullMethodName = "/course_recommender.DegreeCourseService/GetCoursesByDegreeId"
	DegreeCourseService_GetDegreesByCourseId_FullMethodName = "/course_recommender.DegreeCourseService/GetDegreesByCourseId"
	DegreeCourseService_DeleteDegreeCourse_FullMethodName   = "/course_recommender.DegreeCourseService/DeleteDegreeCourse"
)

// DegreeCourseServiceClient is the client API for DegreeCourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The gRPC service definition for degree-course associations.
type DegreeCourseServiceClient interface {
	// Creates a new degree-course association.
	CreateDegreeCourse(ctx context.Context, in *CreateDegreeCourseRequest, opts ...grpc.CallOption) (*CreateDegreeCourseResponse, error)
	// Retrieves all courses for a specific degree type.
	GetCoursesByDegreeId(ctx context.Context, in *GetCoursesByDegreeIdRequest, opts ...grpc.CallOption) (*GetCoursesByDegreeIdResponse, error)
	// Retrieves all degree types for a specific course.
	GetDegreesByCourseId(ctx context.Context, in *GetDegreesByCourseIdRequest, opts ...grpc.CallOption) (*GetDegreesByCourseIdResponse, error)
	// Deletes a degree-course association.
	DeleteDegreeCourse(ctx context.Context, in *DeleteDegreeCourseRequest, opts ...grpc.CallOption) (*DeleteDegreeCourseResponse, error)
}

type degreeCourseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDegreeCourseServiceClient(cc grpc.ClientConnInterface) DegreeCourseServiceClient {
	return &degreeCourseServiceClient{cc}
}

func (c *degreeCourseServiceClient) CreateDegreeCourse(ctx context.Context, in *CreateDegreeCourseRequest, opts ...grpc.CallOption) (*CreateDegreeCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDegreeCourseResponse)
	err := c.cc.Invoke(ctx, DegreeCourseService_CreateDegreeCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeCourseServiceClient) GetCoursesByDegreeId(ctx context.Context, in *GetCoursesByDegreeIdRequest, opts ...grpc.CallOption) (*GetCoursesByDegreeIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesByDegreeIdResponse)
	err := c.cc.Invoke(ctx, DegreeCourseService_GetCoursesByDegreeId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeCourseServiceClient) GetDegreesByCourseId(ctx context.Context, in *GetDegreesByCourseIdRequest, opts ...grpc.CallOption) (*GetDegreesByCourseIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDegreesByCourseIdResponse)
	err := c.cc.Invoke(ctx, DegreeCourseService_GetDegreesByCourseId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeCourseServiceClient) DeleteDegreeCourse(ctx context.Context, in *DeleteDegreeCourseRequest, opts ...grpc.CallOption) (*DeleteDegreeCourseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDegreeCourseResponse)
	err := c.cc.Invoke(ctx, DegreeCourseService_DeleteDegreeCourse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DegreeCourseServiceServer is the server API for DegreeCourseService service.
// All implementations must embed UnimplementedDegreeCourseServiceServer
// for forward compatibility.
//
// The gRPC service definition for degree-course associations.
type DegreeCourseServiceServer interface {
	// Creates a new degree-course association.
	CreateDegreeCourse(context.Context, *CreateDegreeCourseRequest) (*CreateDegreeCourseResponse, error)
	// Retrieves all courses for a specific degree type.
	GetCoursesByDegreeId(context.Context, *GetCoursesByDegreeIdRequest) (*GetCoursesByDegreeIdResponse, error)
	// Retrieves all degree types for a specific course.
	GetDegreesByCourseId(context.Context, *GetDegreesByCourseIdRequest) (*GetDegreesByCourseIdResponse, error)
	// Deletes a degree-course association.
	DeleteDegreeCourse(context.Context, *DeleteDegreeCourseRequest) (*DeleteDegreeCourseResponse, error)
	mustEmbedUnimplementedDegreeCourseServiceServer()
}

// UnimplementedDegreeCourseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDegreeCourseServiceServer struct{}

func (UnimplementedDegreeCourseServiceServer) CreateDegreeCourse(context.Context, *CreateDegreeCourseRequest) (*CreateDegreeCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDegreeCourse not implemented")
}
func (UnimplementedDegreeCourseServiceServer) GetCoursesByDegreeId(context.Context, *GetCoursesByDegreeIdRequest) (*GetCoursesByDegreeIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByDegreeId not implemented")
}
func (UnimplementedDegreeCourseServiceServer) GetDegreesByCourseId(context.Context, *GetDegreesByCourseIdRequest) (*GetDegreesByCourseIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDegreesByCourseId not implemented")
}
func (UnimplementedDegreeCourseServiceServer) DeleteDegreeCourse(context.Context, *DeleteDegreeCourseRequest) (*DeleteDegreeCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDegreeCourse not implemented")
}
func (UnimplementedDegreeCourseServiceServer) mustEmbedUnimplementedDegreeCourseServiceServer() {}
func (UnimplementedDegreeCourseServiceServer) testEmbeddedByValue()                             {}

// UnsafeDegreeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DegreeCourseServiceServer will
// result in compilation errors.
type UnsafeDegreeCourseServiceServer interface {
	mustEmbedUnimplementedDegreeCourseServiceServer()
}

func RegisterDegreeCourseServiceServer(s grpc.ServiceRegistrar, srv DegreeCourseServiceServer) {
	// If the following call pancis, it indicates UnimplementedDegreeCourseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DegreeCourseService_ServiceDesc, srv)
}

func _DegreeCourseService_CreateDegreeCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDegreeCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeCourseServiceServer).CreateDegreeCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeCourseService_CreateDegreeCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeCourseServiceServer).CreateDegreeCourse(ctx, req.(*CreateDegreeCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeCourseService_GetCoursesByDegreeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByDegreeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeCourseServiceServer).GetCoursesByDegreeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeCourseService_GetCoursesByDegreeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeCourseServiceServer).GetCoursesByDegreeId(ctx, req.(*GetCoursesByDegreeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeCourseService_GetDegreesByCourseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreesByCourseIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeCourseServiceServer).GetDegreesByCourseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeCourseService_GetDegreesByCourseId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeCourseServiceServer).GetDegreesByCourseId(ctx, req.(*GetDegreesByCourseIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeCourseService_DeleteDegreeCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDegreeCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeCourseServiceServer).DeleteDegreeCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DegreeCourseService_DeleteDegreeCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeCourseServiceServer).DeleteDegreeCourse(ctx, req.(*DeleteDegreeCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DegreeCourseService_ServiceDesc is the grpc.ServiceDesc for DegreeCourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DegreeCourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course_recommender.DegreeCourseService",
	HandlerType: (*DegreeCourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDegreeCourse",
			Handler:    _DegreeCourseService_CreateDegreeCourse_Handler,
		},
		{
			MethodName: "GetCoursesByDegreeId",
			Handler:    _DegreeCourseService_GetCoursesByDegreeId_Handler,
		},
		{
			MethodName: "GetDegreesByCourseId",
			Handler:    _DegreeCourseService_GetDegreesByCourseId_Handler,
		},
		{
			MethodName: "DeleteDegreeCourse",
			Handler:    _DegreeCourseService_DeleteDegreeCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "degree_course.proto",
}
